
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001928  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  2000000c  00001934  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000060  00001988  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001502c  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002479  00000000  00000000  000350b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002d09  00000000  00000000  00037532  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000348  00000000  00000000  0003a23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000500  00000000  00000000  0003a583  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018363  00000000  00000000  0003aa83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008d1b  00000000  00000000  00052de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008591e  00000000  00000000  0005bb01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000908  00000000  00000000  000e1420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 20 00 20 c9 0b 00 00 c5 0b 00 00 c5 0b 00 00     ` . ............
	...
      2c:	c5 0b 00 00 00 00 00 00 00 00 00 00 c5 0b 00 00     ................
      3c:	c5 0b 00 00 c5 0b 00 00 c5 0b 00 00 c5 0b 00 00     ................
      4c:	c5 0b 00 00 c5 0b 00 00 c5 0b 00 00 c5 0b 00 00     ................
      5c:	c5 0b 00 00 c5 0b 00 00 61 05 00 00 71 05 00 00     ........a...q...
      6c:	81 05 00 00 91 05 00 00 a1 05 00 00 b1 05 00 00     ................
      7c:	c5 0b 00 00 c5 0b 00 00 c5 0b 00 00 c5 0b 00 00     ................
      8c:	c5 0b 00 00 c5 0b 00 00 00 00 00 00 00 00 00 00     ................
      9c:	c5 0b 00 00 c5 0b 00 00 c5 0b 00 00 c5 0b 00 00     ................
      ac:	c5 0b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001928 	.word	0x00001928

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001928 	.word	0x00001928
     10c:	00001928 	.word	0x00001928
     110:	00000000 	.word	0x00000000

00000114 <calc_word>:
 */ 
#include "ad9851.h"
#include "lcd1602.h"

unsigned int calc_word(double frequency)
{
     114:	b510      	push	{r4, lr}
	unsigned int temp = (unsigned int) frequency*CLOCK_WORD_RATIO;
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <calc_word+0x10>)
     118:	4798      	blx	r3
     11a:	0083      	lsls	r3, r0, #2
     11c:	1818      	adds	r0, r3, r0
     11e:	00c3      	lsls	r3, r0, #3
     120:	1a18      	subs	r0, r3, r0
	return (unsigned int) temp;
}
     122:	bd10      	pop	{r4, pc}
     124:	00000e55 	.word	0x00000e55

00000128 <ad9851_init>:

void ad9851_init(void)
{
     128:	b530      	push	{r4, r5, lr}
     12a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     12c:	ac01      	add	r4, sp, #4
     12e:	2301      	movs	r3, #1
     130:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     132:	2200      	movs	r2, #0
     134:	70a2      	strb	r2, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     136:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(DDS_D0, &config_port_pin);
     138:	0021      	movs	r1, r4
     13a:	2002      	movs	r0, #2
     13c:	4d10      	ldr	r5, [pc, #64]	; (180 <ad9851_init+0x58>)
     13e:	47a8      	blx	r5
	port_pin_set_config(DDS_D1, &config_port_pin);
     140:	0021      	movs	r1, r4
     142:	2003      	movs	r0, #3
     144:	47a8      	blx	r5
	port_pin_set_config(DDS_D2, &config_port_pin);
     146:	0021      	movs	r1, r4
     148:	2004      	movs	r0, #4
     14a:	47a8      	blx	r5
	port_pin_set_config(DDS_D3, &config_port_pin);
     14c:	0021      	movs	r1, r4
     14e:	2005      	movs	r0, #5
     150:	47a8      	blx	r5
	port_pin_set_config(DDS_D4, &config_port_pin);
     152:	0021      	movs	r1, r4
     154:	2006      	movs	r0, #6
     156:	47a8      	blx	r5
	port_pin_set_config(DDS_D5, &config_port_pin);
     158:	0021      	movs	r1, r4
     15a:	2007      	movs	r0, #7
     15c:	47a8      	blx	r5
	port_pin_set_config(DDS_D6, &config_port_pin);
     15e:	0021      	movs	r1, r4
     160:	2008      	movs	r0, #8
     162:	47a8      	blx	r5
	port_pin_set_config(DDS_D7, &config_port_pin);
     164:	0021      	movs	r1, r4
     166:	2009      	movs	r0, #9
     168:	47a8      	blx	r5
	
	port_pin_set_config(DDS_F_UP, &config_port_pin);
     16a:	0021      	movs	r1, r4
     16c:	200b      	movs	r0, #11
     16e:	47a8      	blx	r5
	port_pin_set_config(DDS_W_CLK, &config_port_pin);
     170:	0021      	movs	r1, r4
     172:	200a      	movs	r0, #10
     174:	47a8      	blx	r5
	port_pin_set_config(DDS_RESET, &config_port_pin);
     176:	0021      	movs	r1, r4
     178:	202a      	movs	r0, #42	; 0x2a
     17a:	47a8      	blx	r5
}
     17c:	b003      	add	sp, #12
     17e:	bd30      	pop	{r4, r5, pc}
     180:	000005c1 	.word	0x000005c1

00000184 <put_data_byte>:

void put_data_byte(uint8_t data_byte)
{
     184:	b570      	push	{r4, r5, r6, lr}
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     186:	07c3      	lsls	r3, r0, #31
     188:	d530      	bpl.n	1ec <put_data_byte+0x68>
		port_base->OUTSET.reg = pin_mask;
     18a:	2204      	movs	r2, #4
     18c:	4b28      	ldr	r3, [pc, #160]	; (230 <put_data_byte+0xac>)
     18e:	619a      	str	r2, [r3, #24]
	if (level) {
     190:	0783      	lsls	r3, r0, #30
     192:	d52f      	bpl.n	1f4 <put_data_byte+0x70>
		port_base->OUTSET.reg = pin_mask;
     194:	2208      	movs	r2, #8
     196:	4b26      	ldr	r3, [pc, #152]	; (230 <put_data_byte+0xac>)
     198:	619a      	str	r2, [r3, #24]
	if (level) {
     19a:	0743      	lsls	r3, r0, #29
     19c:	d52e      	bpl.n	1fc <put_data_byte+0x78>
		port_base->OUTSET.reg = pin_mask;
     19e:	2210      	movs	r2, #16
     1a0:	4b23      	ldr	r3, [pc, #140]	; (230 <put_data_byte+0xac>)
     1a2:	619a      	str	r2, [r3, #24]
	if (level) {
     1a4:	0703      	lsls	r3, r0, #28
     1a6:	d52d      	bpl.n	204 <put_data_byte+0x80>
		port_base->OUTSET.reg = pin_mask;
     1a8:	2220      	movs	r2, #32
     1aa:	4b21      	ldr	r3, [pc, #132]	; (230 <put_data_byte+0xac>)
     1ac:	619a      	str	r2, [r3, #24]
	if (level) {
     1ae:	06c3      	lsls	r3, r0, #27
     1b0:	d52c      	bpl.n	20c <put_data_byte+0x88>
		port_base->OUTSET.reg = pin_mask;
     1b2:	2240      	movs	r2, #64	; 0x40
     1b4:	4b1e      	ldr	r3, [pc, #120]	; (230 <put_data_byte+0xac>)
     1b6:	619a      	str	r2, [r3, #24]
	if (level) {
     1b8:	0683      	lsls	r3, r0, #26
     1ba:	d52b      	bpl.n	214 <put_data_byte+0x90>
		port_base->OUTSET.reg = pin_mask;
     1bc:	2280      	movs	r2, #128	; 0x80
     1be:	4b1c      	ldr	r3, [pc, #112]	; (230 <put_data_byte+0xac>)
     1c0:	619a      	str	r2, [r3, #24]
	if (level) {
     1c2:	0643      	lsls	r3, r0, #25
     1c4:	d52a      	bpl.n	21c <put_data_byte+0x98>
		port_base->OUTSET.reg = pin_mask;
     1c6:	2280      	movs	r2, #128	; 0x80
     1c8:	0052      	lsls	r2, r2, #1
     1ca:	4b19      	ldr	r3, [pc, #100]	; (230 <put_data_byte+0xac>)
     1cc:	619a      	str	r2, [r3, #24]
	if (level) {
     1ce:	09c0      	lsrs	r0, r0, #7
     1d0:	d129      	bne.n	226 <put_data_byte+0xa2>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1d2:	2280      	movs	r2, #128	; 0x80
     1d4:	0092      	lsls	r2, r2, #2
     1d6:	4b16      	ldr	r3, [pc, #88]	; (230 <put_data_byte+0xac>)
     1d8:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     1da:	4c15      	ldr	r4, [pc, #84]	; (230 <put_data_byte+0xac>)
     1dc:	2580      	movs	r5, #128	; 0x80
     1de:	00ed      	lsls	r5, r5, #3
     1e0:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(DDS_D5,((data_byte >> 5)  & 0x01));
	port_pin_set_output_level(DDS_D6,((data_byte >> 6)  & 0x01));
	port_pin_set_output_level(DDS_D7,((data_byte >> 7)  & 0x01));

	port_pin_set_output_level(DDS_W_CLK,1);
	delay_us(1);
     1e2:	2001      	movs	r0, #1
     1e4:	4b13      	ldr	r3, [pc, #76]	; (234 <put_data_byte+0xb0>)
     1e6:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     1e8:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(DDS_W_CLK,0);
}
     1ea:	bd70      	pop	{r4, r5, r6, pc}
     1ec:	2204      	movs	r2, #4
     1ee:	4b10      	ldr	r3, [pc, #64]	; (230 <put_data_byte+0xac>)
     1f0:	615a      	str	r2, [r3, #20]
     1f2:	e7cd      	b.n	190 <put_data_byte+0xc>
     1f4:	2208      	movs	r2, #8
     1f6:	4b0e      	ldr	r3, [pc, #56]	; (230 <put_data_byte+0xac>)
     1f8:	615a      	str	r2, [r3, #20]
     1fa:	e7ce      	b.n	19a <put_data_byte+0x16>
     1fc:	2210      	movs	r2, #16
     1fe:	4b0c      	ldr	r3, [pc, #48]	; (230 <put_data_byte+0xac>)
     200:	615a      	str	r2, [r3, #20]
     202:	e7cf      	b.n	1a4 <put_data_byte+0x20>
     204:	2220      	movs	r2, #32
     206:	4b0a      	ldr	r3, [pc, #40]	; (230 <put_data_byte+0xac>)
     208:	615a      	str	r2, [r3, #20]
     20a:	e7d0      	b.n	1ae <put_data_byte+0x2a>
     20c:	2240      	movs	r2, #64	; 0x40
     20e:	4b08      	ldr	r3, [pc, #32]	; (230 <put_data_byte+0xac>)
     210:	615a      	str	r2, [r3, #20]
     212:	e7d1      	b.n	1b8 <put_data_byte+0x34>
     214:	2280      	movs	r2, #128	; 0x80
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <put_data_byte+0xac>)
     218:	615a      	str	r2, [r3, #20]
     21a:	e7d2      	b.n	1c2 <put_data_byte+0x3e>
     21c:	2280      	movs	r2, #128	; 0x80
     21e:	0052      	lsls	r2, r2, #1
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <put_data_byte+0xac>)
     222:	615a      	str	r2, [r3, #20]
     224:	e7d3      	b.n	1ce <put_data_byte+0x4a>
		port_base->OUTSET.reg = pin_mask;
     226:	2280      	movs	r2, #128	; 0x80
     228:	0092      	lsls	r2, r2, #2
     22a:	4b01      	ldr	r3, [pc, #4]	; (230 <put_data_byte+0xac>)
     22c:	619a      	str	r2, [r3, #24]
     22e:	e7d4      	b.n	1da <put_data_byte+0x56>
     230:	41004400 	.word	0x41004400
     234:	00000509 	.word	0x00000509

00000238 <send_word>:

void send_word(uint32_t word)
{
     238:	b570      	push	{r4, r5, r6, lr}
     23a:	0004      	movs	r4, r0
	//lcd_send_string(buffer);
	//delay_ms(1000);
	//lcd_set_line(2);
	//lcd_send_string("                ");
	//lcd_set_line(2);
	put_data_byte(0x01);
     23c:	2001      	movs	r0, #1
     23e:	4d0a      	ldr	r5, [pc, #40]	; (268 <send_word+0x30>)
     240:	47a8      	blx	r5
		sprintf(buffer,"%02X",(word >> (8*(w))) & 0xFF);
		lcd_send_string(buffer);
		delay_ms(500);
	}*/
	
	put_data_byte((word >> 24) & 0xFF);
     242:	0e20      	lsrs	r0, r4, #24
     244:	47a8      	blx	r5
	put_data_byte((word >> 16) & 0xFF);
     246:	0c20      	lsrs	r0, r4, #16
     248:	b2c0      	uxtb	r0, r0
     24a:	47a8      	blx	r5
	put_data_byte((word >> 8) & 0xFF);
     24c:	0a20      	lsrs	r0, r4, #8
     24e:	b2c0      	uxtb	r0, r0
     250:	47a8      	blx	r5
	put_data_byte((word >> 0) & 0xFF);
     252:	b2e0      	uxtb	r0, r4
     254:	47a8      	blx	r5
     256:	4c05      	ldr	r4, [pc, #20]	; (26c <send_word+0x34>)
     258:	2580      	movs	r5, #128	; 0x80
     25a:	012d      	lsls	r5, r5, #4
     25c:	61a5      	str	r5, [r4, #24]
	
	
	port_pin_set_output_level(DDS_F_UP,1);
	delay_us(1);
     25e:	2001      	movs	r0, #1
     260:	4b03      	ldr	r3, [pc, #12]	; (270 <send_word+0x38>)
     262:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     264:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(DDS_F_UP,0);
     266:	bd70      	pop	{r4, r5, r6, pc}
     268:	00000185 	.word	0x00000185
     26c:	41004400 	.word	0x41004400
     270:	00000509 	.word	0x00000509

00000274 <lcd_cmd>:
	unsigned int completebyte;
} lcd_data_byte;


void lcd_cmd(uint8_t command)
{
     274:	b570      	push	{r4, r5, r6, lr}
	if (level) {
     276:	07c3      	lsls	r3, r0, #31
     278:	d538      	bpl.n	2ec <lcd_cmd+0x78>
		port_base->OUTSET.reg = pin_mask;
     27a:	2280      	movs	r2, #128	; 0x80
     27c:	0212      	lsls	r2, r2, #8
     27e:	4b2f      	ldr	r3, [pc, #188]	; (33c <lcd_cmd+0xc8>)
     280:	619a      	str	r2, [r3, #24]
	if (level) {
     282:	0783      	lsls	r3, r0, #30
     284:	d537      	bpl.n	2f6 <lcd_cmd+0x82>
		port_base->OUTSET.reg = pin_mask;
     286:	2280      	movs	r2, #128	; 0x80
     288:	0252      	lsls	r2, r2, #9
     28a:	4b2c      	ldr	r3, [pc, #176]	; (33c <lcd_cmd+0xc8>)
     28c:	619a      	str	r2, [r3, #24]
	if (level) {
     28e:	0743      	lsls	r3, r0, #29
     290:	d536      	bpl.n	300 <lcd_cmd+0x8c>
		port_base->OUTSET.reg = pin_mask;
     292:	2280      	movs	r2, #128	; 0x80
     294:	0292      	lsls	r2, r2, #10
     296:	4b29      	ldr	r3, [pc, #164]	; (33c <lcd_cmd+0xc8>)
     298:	619a      	str	r2, [r3, #24]
	if (level) {
     29a:	0703      	lsls	r3, r0, #28
     29c:	d535      	bpl.n	30a <lcd_cmd+0x96>
		port_base->OUTSET.reg = pin_mask;
     29e:	2280      	movs	r2, #128	; 0x80
     2a0:	02d2      	lsls	r2, r2, #11
     2a2:	4b26      	ldr	r3, [pc, #152]	; (33c <lcd_cmd+0xc8>)
     2a4:	619a      	str	r2, [r3, #24]
	if (level) {
     2a6:	06c3      	lsls	r3, r0, #27
     2a8:	d534      	bpl.n	314 <lcd_cmd+0xa0>
		port_base->OUTSET.reg = pin_mask;
     2aa:	2280      	movs	r2, #128	; 0x80
     2ac:	0312      	lsls	r2, r2, #12
     2ae:	4b23      	ldr	r3, [pc, #140]	; (33c <lcd_cmd+0xc8>)
     2b0:	619a      	str	r2, [r3, #24]
	if (level) {
     2b2:	0683      	lsls	r3, r0, #26
     2b4:	d533      	bpl.n	31e <lcd_cmd+0xaa>
		port_base->OUTSET.reg = pin_mask;
     2b6:	2280      	movs	r2, #128	; 0x80
     2b8:	0352      	lsls	r2, r2, #13
     2ba:	4b20      	ldr	r3, [pc, #128]	; (33c <lcd_cmd+0xc8>)
     2bc:	619a      	str	r2, [r3, #24]
	if (level) {
     2be:	0643      	lsls	r3, r0, #25
     2c0:	d532      	bpl.n	328 <lcd_cmd+0xb4>
		port_base->OUTSET.reg = pin_mask;
     2c2:	2280      	movs	r2, #128	; 0x80
     2c4:	0392      	lsls	r2, r2, #14
     2c6:	4b1d      	ldr	r3, [pc, #116]	; (33c <lcd_cmd+0xc8>)
     2c8:	619a      	str	r2, [r3, #24]
	if (level) {
     2ca:	09c0      	lsrs	r0, r0, #7
     2cc:	d131      	bne.n	332 <lcd_cmd+0xbe>
		port_base->OUTCLR.reg = pin_mask;
     2ce:	2280      	movs	r2, #128	; 0x80
     2d0:	03d2      	lsls	r2, r2, #15
     2d2:	4b1a      	ldr	r3, [pc, #104]	; (33c <lcd_cmd+0xc8>)
     2d4:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     2d6:	4d19      	ldr	r5, [pc, #100]	; (33c <lcd_cmd+0xc8>)
     2d8:	2680      	movs	r6, #128	; 0x80
     2da:	0436      	lsls	r6, r6, #16
     2dc:	61ae      	str	r6, [r5, #24]
	port_pin_set_output_level(LCD_D5,((command >> 5)  & 0x01));
	port_pin_set_output_level(LCD_D6,((command >> 6)  & 0x01));
	port_pin_set_output_level(LCD_D7,((command >> 7)  & 0x01));

	port_pin_set_output_level(LCD_EN,1);
	delay_ms(2);
     2de:	2002      	movs	r0, #2
     2e0:	4c17      	ldr	r4, [pc, #92]	; (340 <lcd_cmd+0xcc>)
     2e2:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
     2e4:	616e      	str	r6, [r5, #20]
	port_pin_set_output_level(LCD_EN,0);
	delay_ms(2);
     2e6:	2002      	movs	r0, #2
     2e8:	47a0      	blx	r4
}
     2ea:	bd70      	pop	{r4, r5, r6, pc}
     2ec:	2280      	movs	r2, #128	; 0x80
     2ee:	0212      	lsls	r2, r2, #8
     2f0:	4b12      	ldr	r3, [pc, #72]	; (33c <lcd_cmd+0xc8>)
     2f2:	615a      	str	r2, [r3, #20]
     2f4:	e7c5      	b.n	282 <lcd_cmd+0xe>
     2f6:	2280      	movs	r2, #128	; 0x80
     2f8:	0252      	lsls	r2, r2, #9
     2fa:	4b10      	ldr	r3, [pc, #64]	; (33c <lcd_cmd+0xc8>)
     2fc:	615a      	str	r2, [r3, #20]
     2fe:	e7c6      	b.n	28e <lcd_cmd+0x1a>
     300:	2280      	movs	r2, #128	; 0x80
     302:	0292      	lsls	r2, r2, #10
     304:	4b0d      	ldr	r3, [pc, #52]	; (33c <lcd_cmd+0xc8>)
     306:	615a      	str	r2, [r3, #20]
     308:	e7c7      	b.n	29a <lcd_cmd+0x26>
     30a:	2280      	movs	r2, #128	; 0x80
     30c:	02d2      	lsls	r2, r2, #11
     30e:	4b0b      	ldr	r3, [pc, #44]	; (33c <lcd_cmd+0xc8>)
     310:	615a      	str	r2, [r3, #20]
     312:	e7c8      	b.n	2a6 <lcd_cmd+0x32>
     314:	2280      	movs	r2, #128	; 0x80
     316:	0312      	lsls	r2, r2, #12
     318:	4b08      	ldr	r3, [pc, #32]	; (33c <lcd_cmd+0xc8>)
     31a:	615a      	str	r2, [r3, #20]
     31c:	e7c9      	b.n	2b2 <lcd_cmd+0x3e>
     31e:	2280      	movs	r2, #128	; 0x80
     320:	0352      	lsls	r2, r2, #13
     322:	4b06      	ldr	r3, [pc, #24]	; (33c <lcd_cmd+0xc8>)
     324:	615a      	str	r2, [r3, #20]
     326:	e7ca      	b.n	2be <lcd_cmd+0x4a>
     328:	2280      	movs	r2, #128	; 0x80
     32a:	0392      	lsls	r2, r2, #14
     32c:	4b03      	ldr	r3, [pc, #12]	; (33c <lcd_cmd+0xc8>)
     32e:	615a      	str	r2, [r3, #20]
     330:	e7cb      	b.n	2ca <lcd_cmd+0x56>
		port_base->OUTSET.reg = pin_mask;
     332:	2280      	movs	r2, #128	; 0x80
     334:	03d2      	lsls	r2, r2, #15
     336:	4b01      	ldr	r3, [pc, #4]	; (33c <lcd_cmd+0xc8>)
     338:	619a      	str	r2, [r3, #24]
     33a:	e7cc      	b.n	2d6 <lcd_cmd+0x62>
     33c:	41004400 	.word	0x41004400
     340:	00000535 	.word	0x00000535

00000344 <lcd_data>:


void lcd_data(uint8_t data)
{
     344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (level) {
     346:	07c3      	lsls	r3, r0, #31
     348:	d53c      	bpl.n	3c4 <lcd_data+0x80>
		port_base->OUTSET.reg = pin_mask;
     34a:	2280      	movs	r2, #128	; 0x80
     34c:	0212      	lsls	r2, r2, #8
     34e:	4b31      	ldr	r3, [pc, #196]	; (414 <lcd_data+0xd0>)
     350:	619a      	str	r2, [r3, #24]
	if (level) {
     352:	0783      	lsls	r3, r0, #30
     354:	d53b      	bpl.n	3ce <lcd_data+0x8a>
		port_base->OUTSET.reg = pin_mask;
     356:	2280      	movs	r2, #128	; 0x80
     358:	0252      	lsls	r2, r2, #9
     35a:	4b2e      	ldr	r3, [pc, #184]	; (414 <lcd_data+0xd0>)
     35c:	619a      	str	r2, [r3, #24]
	if (level) {
     35e:	0743      	lsls	r3, r0, #29
     360:	d53a      	bpl.n	3d8 <lcd_data+0x94>
		port_base->OUTSET.reg = pin_mask;
     362:	2280      	movs	r2, #128	; 0x80
     364:	0292      	lsls	r2, r2, #10
     366:	4b2b      	ldr	r3, [pc, #172]	; (414 <lcd_data+0xd0>)
     368:	619a      	str	r2, [r3, #24]
	if (level) {
     36a:	0703      	lsls	r3, r0, #28
     36c:	d539      	bpl.n	3e2 <lcd_data+0x9e>
		port_base->OUTSET.reg = pin_mask;
     36e:	2280      	movs	r2, #128	; 0x80
     370:	02d2      	lsls	r2, r2, #11
     372:	4b28      	ldr	r3, [pc, #160]	; (414 <lcd_data+0xd0>)
     374:	619a      	str	r2, [r3, #24]
	if (level) {
     376:	06c3      	lsls	r3, r0, #27
     378:	d538      	bpl.n	3ec <lcd_data+0xa8>
		port_base->OUTSET.reg = pin_mask;
     37a:	2280      	movs	r2, #128	; 0x80
     37c:	0312      	lsls	r2, r2, #12
     37e:	4b25      	ldr	r3, [pc, #148]	; (414 <lcd_data+0xd0>)
     380:	619a      	str	r2, [r3, #24]
	if (level) {
     382:	0683      	lsls	r3, r0, #26
     384:	d537      	bpl.n	3f6 <lcd_data+0xb2>
		port_base->OUTSET.reg = pin_mask;
     386:	2280      	movs	r2, #128	; 0x80
     388:	0352      	lsls	r2, r2, #13
     38a:	4b22      	ldr	r3, [pc, #136]	; (414 <lcd_data+0xd0>)
     38c:	619a      	str	r2, [r3, #24]
	if (level) {
     38e:	0643      	lsls	r3, r0, #25
     390:	d536      	bpl.n	400 <lcd_data+0xbc>
		port_base->OUTSET.reg = pin_mask;
     392:	2280      	movs	r2, #128	; 0x80
     394:	0392      	lsls	r2, r2, #14
     396:	4b1f      	ldr	r3, [pc, #124]	; (414 <lcd_data+0xd0>)
     398:	619a      	str	r2, [r3, #24]
	if (level) {
     39a:	09c0      	lsrs	r0, r0, #7
     39c:	d135      	bne.n	40a <lcd_data+0xc6>
		port_base->OUTCLR.reg = pin_mask;
     39e:	2280      	movs	r2, #128	; 0x80
     3a0:	03d2      	lsls	r2, r2, #15
     3a2:	4b1c      	ldr	r3, [pc, #112]	; (414 <lcd_data+0xd0>)
     3a4:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     3a6:	4c1b      	ldr	r4, [pc, #108]	; (414 <lcd_data+0xd0>)
     3a8:	2780      	movs	r7, #128	; 0x80
     3aa:	043f      	lsls	r7, r7, #16
     3ac:	61a7      	str	r7, [r4, #24]
     3ae:	2680      	movs	r6, #128	; 0x80
     3b0:	04b6      	lsls	r6, r6, #18
     3b2:	61a6      	str	r6, [r4, #24]
	port_pin_set_output_level(LCD_D6,((data >> 6)  & 0x01));
	port_pin_set_output_level(LCD_D7,((data >> 7)  & 0x01));

	port_pin_set_output_level(LCD_EN,1);
	port_pin_set_output_level(LCD_RS,1);
	delay_ms(2);
     3b4:	2002      	movs	r0, #2
     3b6:	4d18      	ldr	r5, [pc, #96]	; (418 <lcd_data+0xd4>)
     3b8:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
     3ba:	6167      	str	r7, [r4, #20]
     3bc:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(LCD_EN,0);
	port_pin_set_output_level(LCD_RS,0);
	delay_ms(2);
     3be:	2002      	movs	r0, #2
     3c0:	47a8      	blx	r5
}
     3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c4:	2280      	movs	r2, #128	; 0x80
     3c6:	0212      	lsls	r2, r2, #8
     3c8:	4b12      	ldr	r3, [pc, #72]	; (414 <lcd_data+0xd0>)
     3ca:	615a      	str	r2, [r3, #20]
     3cc:	e7c1      	b.n	352 <lcd_data+0xe>
     3ce:	2280      	movs	r2, #128	; 0x80
     3d0:	0252      	lsls	r2, r2, #9
     3d2:	4b10      	ldr	r3, [pc, #64]	; (414 <lcd_data+0xd0>)
     3d4:	615a      	str	r2, [r3, #20]
     3d6:	e7c2      	b.n	35e <lcd_data+0x1a>
     3d8:	2280      	movs	r2, #128	; 0x80
     3da:	0292      	lsls	r2, r2, #10
     3dc:	4b0d      	ldr	r3, [pc, #52]	; (414 <lcd_data+0xd0>)
     3de:	615a      	str	r2, [r3, #20]
     3e0:	e7c3      	b.n	36a <lcd_data+0x26>
     3e2:	2280      	movs	r2, #128	; 0x80
     3e4:	02d2      	lsls	r2, r2, #11
     3e6:	4b0b      	ldr	r3, [pc, #44]	; (414 <lcd_data+0xd0>)
     3e8:	615a      	str	r2, [r3, #20]
     3ea:	e7c4      	b.n	376 <lcd_data+0x32>
     3ec:	2280      	movs	r2, #128	; 0x80
     3ee:	0312      	lsls	r2, r2, #12
     3f0:	4b08      	ldr	r3, [pc, #32]	; (414 <lcd_data+0xd0>)
     3f2:	615a      	str	r2, [r3, #20]
     3f4:	e7c5      	b.n	382 <lcd_data+0x3e>
     3f6:	2280      	movs	r2, #128	; 0x80
     3f8:	0352      	lsls	r2, r2, #13
     3fa:	4b06      	ldr	r3, [pc, #24]	; (414 <lcd_data+0xd0>)
     3fc:	615a      	str	r2, [r3, #20]
     3fe:	e7c6      	b.n	38e <lcd_data+0x4a>
     400:	2280      	movs	r2, #128	; 0x80
     402:	0392      	lsls	r2, r2, #14
     404:	4b03      	ldr	r3, [pc, #12]	; (414 <lcd_data+0xd0>)
     406:	615a      	str	r2, [r3, #20]
     408:	e7c7      	b.n	39a <lcd_data+0x56>
		port_base->OUTSET.reg = pin_mask;
     40a:	2280      	movs	r2, #128	; 0x80
     40c:	03d2      	lsls	r2, r2, #15
     40e:	4b01      	ldr	r3, [pc, #4]	; (414 <lcd_data+0xd0>)
     410:	619a      	str	r2, [r3, #24]
     412:	e7c8      	b.n	3a6 <lcd_data+0x62>
     414:	41004400 	.word	0x41004400
     418:	00000535 	.word	0x00000535

0000041c <lcd_send_string>:

void lcd_send_string(char* string)
{
     41c:	b570      	push	{r4, r5, r6, lr}
     41e:	0004      	movs	r4, r0
	while(*string)
     420:	7800      	ldrb	r0, [r0, #0]
     422:	2800      	cmp	r0, #0
     424:	d005      	beq.n	432 <lcd_send_string+0x16>
	{
		//Send value of pointer as data to LCD
		lcd_data(*string);
     426:	4d03      	ldr	r5, [pc, #12]	; (434 <lcd_send_string+0x18>)
     428:	47a8      	blx	r5
		//Increment string pointer
		string++;
     42a:	3401      	adds	r4, #1
	while(*string)
     42c:	7820      	ldrb	r0, [r4, #0]
     42e:	2800      	cmp	r0, #0
     430:	d1fa      	bne.n	428 <lcd_send_string+0xc>
	}
}
     432:	bd70      	pop	{r4, r5, r6, pc}
     434:	00000345 	.word	0x00000345

00000438 <configure_lcd_pins>:
	//Goto first position
	lcd_cmd(0x80);
}

void configure_lcd_pins(void)
{
     438:	b530      	push	{r4, r5, lr}
     43a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     43c:	ac01      	add	r4, sp, #4
     43e:	2301      	movs	r3, #1
     440:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     442:	2200      	movs	r2, #0
     444:	70a2      	strb	r2, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     446:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LCD_D0, &config_port_pin);
     448:	0021      	movs	r1, r4
     44a:	200f      	movs	r0, #15
     44c:	4d10      	ldr	r5, [pc, #64]	; (490 <configure_lcd_pins+0x58>)
     44e:	47a8      	blx	r5
	port_pin_set_config(LCD_D1, &config_port_pin);
     450:	0021      	movs	r1, r4
     452:	2010      	movs	r0, #16
     454:	47a8      	blx	r5
	port_pin_set_config(LCD_D2, &config_port_pin);
     456:	0021      	movs	r1, r4
     458:	2011      	movs	r0, #17
     45a:	47a8      	blx	r5
	port_pin_set_config(LCD_D3, &config_port_pin);
     45c:	0021      	movs	r1, r4
     45e:	2012      	movs	r0, #18
     460:	47a8      	blx	r5
	port_pin_set_config(LCD_D4, &config_port_pin);
     462:	0021      	movs	r1, r4
     464:	2013      	movs	r0, #19
     466:	47a8      	blx	r5
	port_pin_set_config(LCD_D5, &config_port_pin);
     468:	0021      	movs	r1, r4
     46a:	2014      	movs	r0, #20
     46c:	47a8      	blx	r5
	port_pin_set_config(LCD_D6, &config_port_pin);
     46e:	0021      	movs	r1, r4
     470:	2015      	movs	r0, #21
     472:	47a8      	blx	r5
	port_pin_set_config(LCD_D7, &config_port_pin);
     474:	0021      	movs	r1, r4
     476:	2016      	movs	r0, #22
     478:	47a8      	blx	r5
	
	port_pin_set_config(LCD_EN, &config_port_pin);
     47a:	0021      	movs	r1, r4
     47c:	2017      	movs	r0, #23
     47e:	47a8      	blx	r5
	port_pin_set_config(LCD_RW, &config_port_pin);
     480:	0021      	movs	r1, r4
     482:	2018      	movs	r0, #24
     484:	47a8      	blx	r5
	port_pin_set_config(LCD_RS, &config_port_pin);
     486:	0021      	movs	r1, r4
     488:	2019      	movs	r0, #25
     48a:	47a8      	blx	r5
}
     48c:	b003      	add	sp, #12
     48e:	bd30      	pop	{r4, r5, pc}
     490:	000005c1 	.word	0x000005c1

00000494 <lcd_init>:
{
     494:	b570      	push	{r4, r5, r6, lr}
	configure_lcd_pins();
     496:	4b09      	ldr	r3, [pc, #36]	; (4bc <lcd_init+0x28>)
     498:	4798      	blx	r3
	lcd_cmd(0x38);
     49a:	2038      	movs	r0, #56	; 0x38
     49c:	4c08      	ldr	r4, [pc, #32]	; (4c0 <lcd_init+0x2c>)
     49e:	47a0      	blx	r4
	delay_ms(6);
     4a0:	2006      	movs	r0, #6
     4a2:	4d08      	ldr	r5, [pc, #32]	; (4c4 <lcd_init+0x30>)
     4a4:	47a8      	blx	r5
	lcd_cmd(0x0E);
     4a6:	200e      	movs	r0, #14
     4a8:	47a0      	blx	r4
	delay_ms(6);
     4aa:	2006      	movs	r0, #6
     4ac:	47a8      	blx	r5
	lcd_cmd(LCD_CMD_CLEAR_SCREEN);
     4ae:	2001      	movs	r0, #1
     4b0:	47a0      	blx	r4
	delay_ms(6);
     4b2:	2006      	movs	r0, #6
     4b4:	47a8      	blx	r5
	lcd_cmd(0x80);
     4b6:	2080      	movs	r0, #128	; 0x80
     4b8:	47a0      	blx	r4
}
     4ba:	bd70      	pop	{r4, r5, r6, pc}
     4bc:	00000439 	.word	0x00000439
     4c0:	00000275 	.word	0x00000275
     4c4:	00000535 	.word	0x00000535

000004c8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     4c8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     4ca:	2000      	movs	r0, #0
     4cc:	4b08      	ldr	r3, [pc, #32]	; (4f0 <delay_init+0x28>)
     4ce:	4798      	blx	r3
     4d0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     4d2:	4c08      	ldr	r4, [pc, #32]	; (4f4 <delay_init+0x2c>)
     4d4:	21fa      	movs	r1, #250	; 0xfa
     4d6:	0089      	lsls	r1, r1, #2
     4d8:	47a0      	blx	r4
     4da:	4b07      	ldr	r3, [pc, #28]	; (4f8 <delay_init+0x30>)
     4dc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     4de:	4907      	ldr	r1, [pc, #28]	; (4fc <delay_init+0x34>)
     4e0:	0028      	movs	r0, r5
     4e2:	47a0      	blx	r4
     4e4:	4b06      	ldr	r3, [pc, #24]	; (500 <delay_init+0x38>)
     4e6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     4e8:	2205      	movs	r2, #5
     4ea:	4b06      	ldr	r3, [pc, #24]	; (504 <delay_init+0x3c>)
     4ec:	601a      	str	r2, [r3, #0]
}
     4ee:	bd70      	pop	{r4, r5, r6, pc}
     4f0:	00000985 	.word	0x00000985
     4f4:	00000d3d 	.word	0x00000d3d
     4f8:	20000000 	.word	0x20000000
     4fc:	000f4240 	.word	0x000f4240
     500:	20000004 	.word	0x20000004
     504:	e000e010 	.word	0xe000e010

00000508 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     508:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     50a:	4b08      	ldr	r3, [pc, #32]	; (52c <delay_cycles_us+0x24>)
     50c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     50e:	4a08      	ldr	r2, [pc, #32]	; (530 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     510:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     512:	2180      	movs	r1, #128	; 0x80
     514:	0249      	lsls	r1, r1, #9
	while (n--) {
     516:	3801      	subs	r0, #1
     518:	d307      	bcc.n	52a <delay_cycles_us+0x22>
	if (n > 0) {
     51a:	2c00      	cmp	r4, #0
     51c:	d0fb      	beq.n	516 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     51e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     520:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     522:	6813      	ldr	r3, [r2, #0]
     524:	420b      	tst	r3, r1
     526:	d0fc      	beq.n	522 <delay_cycles_us+0x1a>
     528:	e7f5      	b.n	516 <delay_cycles_us+0xe>
	}
}
     52a:	bd30      	pop	{r4, r5, pc}
     52c:	20000004 	.word	0x20000004
     530:	e000e010 	.word	0xe000e010

00000534 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     534:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     536:	4b08      	ldr	r3, [pc, #32]	; (558 <delay_cycles_ms+0x24>)
     538:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     53a:	4a08      	ldr	r2, [pc, #32]	; (55c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     53c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     53e:	2180      	movs	r1, #128	; 0x80
     540:	0249      	lsls	r1, r1, #9
	while (n--) {
     542:	3801      	subs	r0, #1
     544:	d307      	bcc.n	556 <delay_cycles_ms+0x22>
	if (n > 0) {
     546:	2c00      	cmp	r4, #0
     548:	d0fb      	beq.n	542 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     54a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     54c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     54e:	6813      	ldr	r3, [r2, #0]
     550:	420b      	tst	r3, r1
     552:	d0fc      	beq.n	54e <delay_cycles_ms+0x1a>
     554:	e7f5      	b.n	542 <delay_cycles_ms+0xe>
	}
}
     556:	bd30      	pop	{r4, r5, pc}
     558:	20000000 	.word	0x20000000
     55c:	e000e010 	.word	0xe000e010

00000560 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     560:	b510      	push	{r4, lr}
     562:	4b02      	ldr	r3, [pc, #8]	; (56c <SERCOM0_Handler+0xc>)
     564:	681b      	ldr	r3, [r3, #0]
     566:	2000      	movs	r0, #0
     568:	4798      	blx	r3
     56a:	bd10      	pop	{r4, pc}
     56c:	20000028 	.word	0x20000028

00000570 <SERCOM1_Handler>:
     570:	b510      	push	{r4, lr}
     572:	4b02      	ldr	r3, [pc, #8]	; (57c <SERCOM1_Handler+0xc>)
     574:	685b      	ldr	r3, [r3, #4]
     576:	2001      	movs	r0, #1
     578:	4798      	blx	r3
     57a:	bd10      	pop	{r4, pc}
     57c:	20000028 	.word	0x20000028

00000580 <SERCOM2_Handler>:
     580:	b510      	push	{r4, lr}
     582:	4b02      	ldr	r3, [pc, #8]	; (58c <SERCOM2_Handler+0xc>)
     584:	689b      	ldr	r3, [r3, #8]
     586:	2002      	movs	r0, #2
     588:	4798      	blx	r3
     58a:	bd10      	pop	{r4, pc}
     58c:	20000028 	.word	0x20000028

00000590 <SERCOM3_Handler>:
     590:	b510      	push	{r4, lr}
     592:	4b02      	ldr	r3, [pc, #8]	; (59c <SERCOM3_Handler+0xc>)
     594:	68db      	ldr	r3, [r3, #12]
     596:	2003      	movs	r0, #3
     598:	4798      	blx	r3
     59a:	bd10      	pop	{r4, pc}
     59c:	20000028 	.word	0x20000028

000005a0 <SERCOM4_Handler>:
     5a0:	b510      	push	{r4, lr}
     5a2:	4b02      	ldr	r3, [pc, #8]	; (5ac <SERCOM4_Handler+0xc>)
     5a4:	691b      	ldr	r3, [r3, #16]
     5a6:	2004      	movs	r0, #4
     5a8:	4798      	blx	r3
     5aa:	bd10      	pop	{r4, pc}
     5ac:	20000028 	.word	0x20000028

000005b0 <SERCOM5_Handler>:
     5b0:	b510      	push	{r4, lr}
     5b2:	4b02      	ldr	r3, [pc, #8]	; (5bc <SERCOM5_Handler+0xc>)
     5b4:	695b      	ldr	r3, [r3, #20]
     5b6:	2005      	movs	r0, #5
     5b8:	4798      	blx	r3
     5ba:	bd10      	pop	{r4, pc}
     5bc:	20000028 	.word	0x20000028

000005c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     5c0:	b500      	push	{lr}
     5c2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5c4:	ab01      	add	r3, sp, #4
     5c6:	2280      	movs	r2, #128	; 0x80
     5c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     5ca:	780a      	ldrb	r2, [r1, #0]
     5cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     5ce:	784a      	ldrb	r2, [r1, #1]
     5d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     5d2:	788a      	ldrb	r2, [r1, #2]
     5d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     5d6:	0019      	movs	r1, r3
     5d8:	4b01      	ldr	r3, [pc, #4]	; (5e0 <port_pin_set_config+0x20>)
     5da:	4798      	blx	r3
}
     5dc:	b003      	add	sp, #12
     5de:	bd00      	pop	{pc}
     5e0:	00000b65 	.word	0x00000b65

000005e4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     5e4:	4770      	bx	lr
	...

000005e8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     5e8:	4b0c      	ldr	r3, [pc, #48]	; (61c <cpu_irq_enter_critical+0x34>)
     5ea:	681b      	ldr	r3, [r3, #0]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d106      	bne.n	5fe <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5f0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     5f4:	2b00      	cmp	r3, #0
     5f6:	d007      	beq.n	608 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     5f8:	2200      	movs	r2, #0
     5fa:	4b09      	ldr	r3, [pc, #36]	; (620 <cpu_irq_enter_critical+0x38>)
     5fc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     5fe:	4a07      	ldr	r2, [pc, #28]	; (61c <cpu_irq_enter_critical+0x34>)
     600:	6813      	ldr	r3, [r2, #0]
     602:	3301      	adds	r3, #1
     604:	6013      	str	r3, [r2, #0]
}
     606:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     608:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     60a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     60e:	2200      	movs	r2, #0
     610:	4b04      	ldr	r3, [pc, #16]	; (624 <cpu_irq_enter_critical+0x3c>)
     612:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     614:	3201      	adds	r2, #1
     616:	4b02      	ldr	r3, [pc, #8]	; (620 <cpu_irq_enter_critical+0x38>)
     618:	701a      	strb	r2, [r3, #0]
     61a:	e7f0      	b.n	5fe <cpu_irq_enter_critical+0x16>
     61c:	20000040 	.word	0x20000040
     620:	20000044 	.word	0x20000044
     624:	20000008 	.word	0x20000008

00000628 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     628:	4b08      	ldr	r3, [pc, #32]	; (64c <cpu_irq_leave_critical+0x24>)
     62a:	681a      	ldr	r2, [r3, #0]
     62c:	3a01      	subs	r2, #1
     62e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     630:	681b      	ldr	r3, [r3, #0]
     632:	2b00      	cmp	r3, #0
     634:	d109      	bne.n	64a <cpu_irq_leave_critical+0x22>
     636:	4b06      	ldr	r3, [pc, #24]	; (650 <cpu_irq_leave_critical+0x28>)
     638:	781b      	ldrb	r3, [r3, #0]
     63a:	2b00      	cmp	r3, #0
     63c:	d005      	beq.n	64a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     63e:	2201      	movs	r2, #1
     640:	4b04      	ldr	r3, [pc, #16]	; (654 <cpu_irq_leave_critical+0x2c>)
     642:	701a      	strb	r2, [r3, #0]
     644:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     648:	b662      	cpsie	i
	}
}
     64a:	4770      	bx	lr
     64c:	20000040 	.word	0x20000040
     650:	20000044 	.word	0x20000044
     654:	20000008 	.word	0x20000008

00000658 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     658:	b510      	push	{r4, lr}
	switch (clock_source) {
     65a:	2808      	cmp	r0, #8
     65c:	d803      	bhi.n	666 <system_clock_source_get_hz+0xe>
     65e:	0080      	lsls	r0, r0, #2
     660:	4b1b      	ldr	r3, [pc, #108]	; (6d0 <system_clock_source_get_hz+0x78>)
     662:	581b      	ldr	r3, [r3, r0]
     664:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     666:	2000      	movs	r0, #0
     668:	e030      	b.n	6cc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     66a:	4b1a      	ldr	r3, [pc, #104]	; (6d4 <system_clock_source_get_hz+0x7c>)
     66c:	6918      	ldr	r0, [r3, #16]
     66e:	e02d      	b.n	6cc <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     670:	4b19      	ldr	r3, [pc, #100]	; (6d8 <system_clock_source_get_hz+0x80>)
     672:	6a1b      	ldr	r3, [r3, #32]
     674:	059b      	lsls	r3, r3, #22
     676:	0f9b      	lsrs	r3, r3, #30
     678:	4818      	ldr	r0, [pc, #96]	; (6dc <system_clock_source_get_hz+0x84>)
     67a:	40d8      	lsrs	r0, r3
     67c:	e026      	b.n	6cc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     67e:	4b15      	ldr	r3, [pc, #84]	; (6d4 <system_clock_source_get_hz+0x7c>)
     680:	6958      	ldr	r0, [r3, #20]
     682:	e023      	b.n	6cc <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     684:	4b13      	ldr	r3, [pc, #76]	; (6d4 <system_clock_source_get_hz+0x7c>)
     686:	681b      	ldr	r3, [r3, #0]
			return 0;
     688:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     68a:	079b      	lsls	r3, r3, #30
     68c:	d51e      	bpl.n	6cc <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     68e:	4912      	ldr	r1, [pc, #72]	; (6d8 <system_clock_source_get_hz+0x80>)
     690:	2210      	movs	r2, #16
     692:	68cb      	ldr	r3, [r1, #12]
     694:	421a      	tst	r2, r3
     696:	d0fc      	beq.n	692 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     698:	4b0e      	ldr	r3, [pc, #56]	; (6d4 <system_clock_source_get_hz+0x7c>)
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	075b      	lsls	r3, r3, #29
     69e:	d401      	bmi.n	6a4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     6a0:	480f      	ldr	r0, [pc, #60]	; (6e0 <system_clock_source_get_hz+0x88>)
     6a2:	e013      	b.n	6cc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     6a4:	2000      	movs	r0, #0
     6a6:	4b0f      	ldr	r3, [pc, #60]	; (6e4 <system_clock_source_get_hz+0x8c>)
     6a8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     6aa:	4b0a      	ldr	r3, [pc, #40]	; (6d4 <system_clock_source_get_hz+0x7c>)
     6ac:	689b      	ldr	r3, [r3, #8]
     6ae:	041b      	lsls	r3, r3, #16
     6b0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     6b2:	4358      	muls	r0, r3
     6b4:	e00a      	b.n	6cc <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     6b6:	2350      	movs	r3, #80	; 0x50
     6b8:	4a07      	ldr	r2, [pc, #28]	; (6d8 <system_clock_source_get_hz+0x80>)
     6ba:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     6bc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     6be:	075b      	lsls	r3, r3, #29
     6c0:	d504      	bpl.n	6cc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     6c2:	4b04      	ldr	r3, [pc, #16]	; (6d4 <system_clock_source_get_hz+0x7c>)
     6c4:	68d8      	ldr	r0, [r3, #12]
     6c6:	e001      	b.n	6cc <system_clock_source_get_hz+0x74>
		return 32768UL;
     6c8:	2080      	movs	r0, #128	; 0x80
     6ca:	0200      	lsls	r0, r0, #8
	}
}
     6cc:	bd10      	pop	{r4, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	000018a8 	.word	0x000018a8
     6d4:	20000048 	.word	0x20000048
     6d8:	40000800 	.word	0x40000800
     6dc:	007a1200 	.word	0x007a1200
     6e0:	02dc6c00 	.word	0x02dc6c00
     6e4:	00000a89 	.word	0x00000a89

000006e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     6e8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     6ea:	490c      	ldr	r1, [pc, #48]	; (71c <system_clock_source_osc8m_set_config+0x34>)
     6ec:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     6ee:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     6f0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     6f2:	7840      	ldrb	r0, [r0, #1]
     6f4:	2201      	movs	r2, #1
     6f6:	4010      	ands	r0, r2
     6f8:	0180      	lsls	r0, r0, #6
     6fa:	2640      	movs	r6, #64	; 0x40
     6fc:	43b3      	bics	r3, r6
     6fe:	4303      	orrs	r3, r0
     700:	402a      	ands	r2, r5
     702:	01d2      	lsls	r2, r2, #7
     704:	2080      	movs	r0, #128	; 0x80
     706:	4383      	bics	r3, r0
     708:	4313      	orrs	r3, r2
     70a:	2203      	movs	r2, #3
     70c:	4022      	ands	r2, r4
     70e:	0212      	lsls	r2, r2, #8
     710:	4803      	ldr	r0, [pc, #12]	; (720 <system_clock_source_osc8m_set_config+0x38>)
     712:	4003      	ands	r3, r0
     714:	4313      	orrs	r3, r2
     716:	620b      	str	r3, [r1, #32]
}
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	40000800 	.word	0x40000800
     720:	fffffcff 	.word	0xfffffcff

00000724 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     724:	2808      	cmp	r0, #8
     726:	d803      	bhi.n	730 <system_clock_source_enable+0xc>
     728:	0080      	lsls	r0, r0, #2
     72a:	4b25      	ldr	r3, [pc, #148]	; (7c0 <system_clock_source_enable+0x9c>)
     72c:	581b      	ldr	r3, [r3, r0]
     72e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     730:	2017      	movs	r0, #23
     732:	e044      	b.n	7be <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     734:	4a23      	ldr	r2, [pc, #140]	; (7c4 <system_clock_source_enable+0xa0>)
     736:	6a13      	ldr	r3, [r2, #32]
     738:	2102      	movs	r1, #2
     73a:	430b      	orrs	r3, r1
     73c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     73e:	2000      	movs	r0, #0
     740:	e03d      	b.n	7be <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     742:	4a20      	ldr	r2, [pc, #128]	; (7c4 <system_clock_source_enable+0xa0>)
     744:	6993      	ldr	r3, [r2, #24]
     746:	2102      	movs	r1, #2
     748:	430b      	orrs	r3, r1
     74a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     74c:	2000      	movs	r0, #0
		break;
     74e:	e036      	b.n	7be <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     750:	4a1c      	ldr	r2, [pc, #112]	; (7c4 <system_clock_source_enable+0xa0>)
     752:	8a13      	ldrh	r3, [r2, #16]
     754:	2102      	movs	r1, #2
     756:	430b      	orrs	r3, r1
     758:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     75a:	2000      	movs	r0, #0
		break;
     75c:	e02f      	b.n	7be <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     75e:	4a19      	ldr	r2, [pc, #100]	; (7c4 <system_clock_source_enable+0xa0>)
     760:	8a93      	ldrh	r3, [r2, #20]
     762:	2102      	movs	r1, #2
     764:	430b      	orrs	r3, r1
     766:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     768:	2000      	movs	r0, #0
		break;
     76a:	e028      	b.n	7be <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     76c:	4916      	ldr	r1, [pc, #88]	; (7c8 <system_clock_source_enable+0xa4>)
     76e:	680b      	ldr	r3, [r1, #0]
     770:	2202      	movs	r2, #2
     772:	4313      	orrs	r3, r2
     774:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     776:	4b13      	ldr	r3, [pc, #76]	; (7c4 <system_clock_source_enable+0xa0>)
     778:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     77a:	0019      	movs	r1, r3
     77c:	320e      	adds	r2, #14
     77e:	68cb      	ldr	r3, [r1, #12]
     780:	421a      	tst	r2, r3
     782:	d0fc      	beq.n	77e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     784:	4a10      	ldr	r2, [pc, #64]	; (7c8 <system_clock_source_enable+0xa4>)
     786:	6891      	ldr	r1, [r2, #8]
     788:	4b0e      	ldr	r3, [pc, #56]	; (7c4 <system_clock_source_enable+0xa0>)
     78a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     78c:	6852      	ldr	r2, [r2, #4]
     78e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     790:	2200      	movs	r2, #0
     792:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     794:	0019      	movs	r1, r3
     796:	3210      	adds	r2, #16
     798:	68cb      	ldr	r3, [r1, #12]
     79a:	421a      	tst	r2, r3
     79c:	d0fc      	beq.n	798 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     79e:	4b0a      	ldr	r3, [pc, #40]	; (7c8 <system_clock_source_enable+0xa4>)
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	b29b      	uxth	r3, r3
     7a4:	4a07      	ldr	r2, [pc, #28]	; (7c4 <system_clock_source_enable+0xa0>)
     7a6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     7a8:	2000      	movs	r0, #0
     7aa:	e008      	b.n	7be <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     7ac:	4905      	ldr	r1, [pc, #20]	; (7c4 <system_clock_source_enable+0xa0>)
     7ae:	2244      	movs	r2, #68	; 0x44
     7b0:	5c8b      	ldrb	r3, [r1, r2]
     7b2:	2002      	movs	r0, #2
     7b4:	4303      	orrs	r3, r0
     7b6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     7b8:	2000      	movs	r0, #0
		break;
     7ba:	e000      	b.n	7be <system_clock_source_enable+0x9a>
		return STATUS_OK;
     7bc:	2000      	movs	r0, #0
}
     7be:	4770      	bx	lr
     7c0:	000018cc 	.word	0x000018cc
     7c4:	40000800 	.word	0x40000800
     7c8:	20000048 	.word	0x20000048

000007cc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     7cc:	b530      	push	{r4, r5, lr}
     7ce:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     7d0:	22c2      	movs	r2, #194	; 0xc2
     7d2:	00d2      	lsls	r2, r2, #3
     7d4:	4b1a      	ldr	r3, [pc, #104]	; (840 <system_clock_init+0x74>)
     7d6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     7d8:	4a1a      	ldr	r2, [pc, #104]	; (844 <system_clock_init+0x78>)
     7da:	6853      	ldr	r3, [r2, #4]
     7dc:	211e      	movs	r1, #30
     7de:	438b      	bics	r3, r1
     7e0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     7e2:	2301      	movs	r3, #1
     7e4:	466a      	mov	r2, sp
     7e6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     7e8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     7ea:	4d17      	ldr	r5, [pc, #92]	; (848 <system_clock_init+0x7c>)
     7ec:	b2e0      	uxtb	r0, r4
     7ee:	4669      	mov	r1, sp
     7f0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     7f2:	3401      	adds	r4, #1
     7f4:	2c25      	cmp	r4, #37	; 0x25
     7f6:	d1f9      	bne.n	7ec <system_clock_init+0x20>
	config->run_in_standby  = false;
     7f8:	a803      	add	r0, sp, #12
     7fa:	2400      	movs	r4, #0
     7fc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     7fe:	2501      	movs	r5, #1
     800:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     802:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     804:	4b11      	ldr	r3, [pc, #68]	; (84c <system_clock_init+0x80>)
     806:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     808:	2006      	movs	r0, #6
     80a:	4b11      	ldr	r3, [pc, #68]	; (850 <system_clock_init+0x84>)
     80c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     80e:	4b11      	ldr	r3, [pc, #68]	; (854 <system_clock_init+0x88>)
     810:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     812:	4b11      	ldr	r3, [pc, #68]	; (858 <system_clock_init+0x8c>)
     814:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     816:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     818:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     81a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     81c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     81e:	466b      	mov	r3, sp
     820:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     822:	2306      	movs	r3, #6
     824:	466a      	mov	r2, sp
     826:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     828:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     82a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     82c:	4669      	mov	r1, sp
     82e:	2000      	movs	r0, #0
     830:	4b0a      	ldr	r3, [pc, #40]	; (85c <system_clock_init+0x90>)
     832:	4798      	blx	r3
     834:	2000      	movs	r0, #0
     836:	4b0a      	ldr	r3, [pc, #40]	; (860 <system_clock_init+0x94>)
     838:	4798      	blx	r3
#endif
}
     83a:	b005      	add	sp, #20
     83c:	bd30      	pop	{r4, r5, pc}
     83e:	46c0      	nop			; (mov r8, r8)
     840:	40000800 	.word	0x40000800
     844:	41004000 	.word	0x41004000
     848:	00000a6d 	.word	0x00000a6d
     84c:	000006e9 	.word	0x000006e9
     850:	00000725 	.word	0x00000725
     854:	00000865 	.word	0x00000865
     858:	40000400 	.word	0x40000400
     85c:	00000889 	.word	0x00000889
     860:	00000941 	.word	0x00000941

00000864 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     864:	4a06      	ldr	r2, [pc, #24]	; (880 <system_gclk_init+0x1c>)
     866:	6993      	ldr	r3, [r2, #24]
     868:	2108      	movs	r1, #8
     86a:	430b      	orrs	r3, r1
     86c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     86e:	2201      	movs	r2, #1
     870:	4b04      	ldr	r3, [pc, #16]	; (884 <system_gclk_init+0x20>)
     872:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     874:	0019      	movs	r1, r3
     876:	780b      	ldrb	r3, [r1, #0]
     878:	4213      	tst	r3, r2
     87a:	d1fc      	bne.n	876 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     87c:	4770      	bx	lr
     87e:	46c0      	nop			; (mov r8, r8)
     880:	40000400 	.word	0x40000400
     884:	40000c00 	.word	0x40000c00

00000888 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     888:	b570      	push	{r4, r5, r6, lr}
     88a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     88c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     88e:	780d      	ldrb	r5, [r1, #0]
     890:	022d      	lsls	r5, r5, #8
     892:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     894:	784b      	ldrb	r3, [r1, #1]
     896:	2b00      	cmp	r3, #0
     898:	d002      	beq.n	8a0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     89a:	2380      	movs	r3, #128	; 0x80
     89c:	02db      	lsls	r3, r3, #11
     89e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     8a0:	7a4b      	ldrb	r3, [r1, #9]
     8a2:	2b00      	cmp	r3, #0
     8a4:	d002      	beq.n	8ac <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     8a6:	2380      	movs	r3, #128	; 0x80
     8a8:	031b      	lsls	r3, r3, #12
     8aa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     8ac:	6848      	ldr	r0, [r1, #4]
     8ae:	2801      	cmp	r0, #1
     8b0:	d910      	bls.n	8d4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     8b2:	1e43      	subs	r3, r0, #1
     8b4:	4218      	tst	r0, r3
     8b6:	d134      	bne.n	922 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     8b8:	2802      	cmp	r0, #2
     8ba:	d930      	bls.n	91e <system_gclk_gen_set_config+0x96>
     8bc:	2302      	movs	r3, #2
     8be:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     8c0:	3201      	adds	r2, #1
						mask <<= 1) {
     8c2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     8c4:	4298      	cmp	r0, r3
     8c6:	d8fb      	bhi.n	8c0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     8c8:	0212      	lsls	r2, r2, #8
     8ca:	4332      	orrs	r2, r6
     8cc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     8ce:	2380      	movs	r3, #128	; 0x80
     8d0:	035b      	lsls	r3, r3, #13
     8d2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     8d4:	7a0b      	ldrb	r3, [r1, #8]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d002      	beq.n	8e0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     8da:	2380      	movs	r3, #128	; 0x80
     8dc:	039b      	lsls	r3, r3, #14
     8de:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     8e0:	4a13      	ldr	r2, [pc, #76]	; (930 <system_gclk_gen_set_config+0xa8>)
     8e2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     8e4:	b25b      	sxtb	r3, r3
     8e6:	2b00      	cmp	r3, #0
     8e8:	dbfb      	blt.n	8e2 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     8ea:	4b12      	ldr	r3, [pc, #72]	; (934 <system_gclk_gen_set_config+0xac>)
     8ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     8ee:	4b12      	ldr	r3, [pc, #72]	; (938 <system_gclk_gen_set_config+0xb0>)
     8f0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     8f2:	4a0f      	ldr	r2, [pc, #60]	; (930 <system_gclk_gen_set_config+0xa8>)
     8f4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     8f6:	b25b      	sxtb	r3, r3
     8f8:	2b00      	cmp	r3, #0
     8fa:	dbfb      	blt.n	8f4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     8fc:	4b0c      	ldr	r3, [pc, #48]	; (930 <system_gclk_gen_set_config+0xa8>)
     8fe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     900:	001a      	movs	r2, r3
     902:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     904:	b25b      	sxtb	r3, r3
     906:	2b00      	cmp	r3, #0
     908:	dbfb      	blt.n	902 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     90a:	4a09      	ldr	r2, [pc, #36]	; (930 <system_gclk_gen_set_config+0xa8>)
     90c:	6853      	ldr	r3, [r2, #4]
     90e:	2180      	movs	r1, #128	; 0x80
     910:	0249      	lsls	r1, r1, #9
     912:	400b      	ands	r3, r1
     914:	431d      	orrs	r5, r3
     916:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     918:	4b08      	ldr	r3, [pc, #32]	; (93c <system_gclk_gen_set_config+0xb4>)
     91a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     91c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     91e:	2200      	movs	r2, #0
     920:	e7d2      	b.n	8c8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     922:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     924:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     926:	2380      	movs	r3, #128	; 0x80
     928:	029b      	lsls	r3, r3, #10
     92a:	431d      	orrs	r5, r3
     92c:	e7d2      	b.n	8d4 <system_gclk_gen_set_config+0x4c>
     92e:	46c0      	nop			; (mov r8, r8)
     930:	40000c00 	.word	0x40000c00
     934:	000005e9 	.word	0x000005e9
     938:	40000c08 	.word	0x40000c08
     93c:	00000629 	.word	0x00000629

00000940 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     940:	b510      	push	{r4, lr}
     942:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     944:	4a0b      	ldr	r2, [pc, #44]	; (974 <system_gclk_gen_enable+0x34>)
     946:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     948:	b25b      	sxtb	r3, r3
     94a:	2b00      	cmp	r3, #0
     94c:	dbfb      	blt.n	946 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     94e:	4b0a      	ldr	r3, [pc, #40]	; (978 <system_gclk_gen_enable+0x38>)
     950:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     952:	4b0a      	ldr	r3, [pc, #40]	; (97c <system_gclk_gen_enable+0x3c>)
     954:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     956:	4a07      	ldr	r2, [pc, #28]	; (974 <system_gclk_gen_enable+0x34>)
     958:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     95a:	b25b      	sxtb	r3, r3
     95c:	2b00      	cmp	r3, #0
     95e:	dbfb      	blt.n	958 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     960:	4a04      	ldr	r2, [pc, #16]	; (974 <system_gclk_gen_enable+0x34>)
     962:	6851      	ldr	r1, [r2, #4]
     964:	2380      	movs	r3, #128	; 0x80
     966:	025b      	lsls	r3, r3, #9
     968:	430b      	orrs	r3, r1
     96a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     96c:	4b04      	ldr	r3, [pc, #16]	; (980 <system_gclk_gen_enable+0x40>)
     96e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     970:	bd10      	pop	{r4, pc}
     972:	46c0      	nop			; (mov r8, r8)
     974:	40000c00 	.word	0x40000c00
     978:	000005e9 	.word	0x000005e9
     97c:	40000c04 	.word	0x40000c04
     980:	00000629 	.word	0x00000629

00000984 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     984:	b570      	push	{r4, r5, r6, lr}
     986:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     988:	4a1a      	ldr	r2, [pc, #104]	; (9f4 <system_gclk_gen_get_hz+0x70>)
     98a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     98c:	b25b      	sxtb	r3, r3
     98e:	2b00      	cmp	r3, #0
     990:	dbfb      	blt.n	98a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     992:	4b19      	ldr	r3, [pc, #100]	; (9f8 <system_gclk_gen_get_hz+0x74>)
     994:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     996:	4b19      	ldr	r3, [pc, #100]	; (9fc <system_gclk_gen_get_hz+0x78>)
     998:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     99a:	4a16      	ldr	r2, [pc, #88]	; (9f4 <system_gclk_gen_get_hz+0x70>)
     99c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     99e:	b25b      	sxtb	r3, r3
     9a0:	2b00      	cmp	r3, #0
     9a2:	dbfb      	blt.n	99c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     9a4:	4e13      	ldr	r6, [pc, #76]	; (9f4 <system_gclk_gen_get_hz+0x70>)
     9a6:	6870      	ldr	r0, [r6, #4]
     9a8:	04c0      	lsls	r0, r0, #19
     9aa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     9ac:	4b14      	ldr	r3, [pc, #80]	; (a00 <system_gclk_gen_get_hz+0x7c>)
     9ae:	4798      	blx	r3
     9b0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     9b2:	4b12      	ldr	r3, [pc, #72]	; (9fc <system_gclk_gen_get_hz+0x78>)
     9b4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     9b6:	6876      	ldr	r6, [r6, #4]
     9b8:	02f6      	lsls	r6, r6, #11
     9ba:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     9bc:	4b11      	ldr	r3, [pc, #68]	; (a04 <system_gclk_gen_get_hz+0x80>)
     9be:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     9c0:	4a0c      	ldr	r2, [pc, #48]	; (9f4 <system_gclk_gen_get_hz+0x70>)
     9c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     9c4:	b25b      	sxtb	r3, r3
     9c6:	2b00      	cmp	r3, #0
     9c8:	dbfb      	blt.n	9c2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     9ca:	4b0a      	ldr	r3, [pc, #40]	; (9f4 <system_gclk_gen_get_hz+0x70>)
     9cc:	689c      	ldr	r4, [r3, #8]
     9ce:	0224      	lsls	r4, r4, #8
     9d0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     9d2:	4b0d      	ldr	r3, [pc, #52]	; (a08 <system_gclk_gen_get_hz+0x84>)
     9d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     9d6:	2e00      	cmp	r6, #0
     9d8:	d107      	bne.n	9ea <system_gclk_gen_get_hz+0x66>
     9da:	2c01      	cmp	r4, #1
     9dc:	d907      	bls.n	9ee <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     9de:	0021      	movs	r1, r4
     9e0:	0028      	movs	r0, r5
     9e2:	4b0a      	ldr	r3, [pc, #40]	; (a0c <system_gclk_gen_get_hz+0x88>)
     9e4:	4798      	blx	r3
     9e6:	0005      	movs	r5, r0
     9e8:	e001      	b.n	9ee <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     9ea:	3401      	adds	r4, #1
     9ec:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     9ee:	0028      	movs	r0, r5
     9f0:	bd70      	pop	{r4, r5, r6, pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	40000c00 	.word	0x40000c00
     9f8:	000005e9 	.word	0x000005e9
     9fc:	40000c04 	.word	0x40000c04
     a00:	00000659 	.word	0x00000659
     a04:	40000c08 	.word	0x40000c08
     a08:	00000629 	.word	0x00000629
     a0c:	00000d3d 	.word	0x00000d3d

00000a10 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     a10:	b510      	push	{r4, lr}
     a12:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     a14:	4b0f      	ldr	r3, [pc, #60]	; (a54 <system_gclk_chan_disable+0x44>)
     a16:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     a18:	4b0f      	ldr	r3, [pc, #60]	; (a58 <system_gclk_chan_disable+0x48>)
     a1a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     a1c:	4a0f      	ldr	r2, [pc, #60]	; (a5c <system_gclk_chan_disable+0x4c>)
     a1e:	8853      	ldrh	r3, [r2, #2]
     a20:	051b      	lsls	r3, r3, #20
     a22:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     a24:	8853      	ldrh	r3, [r2, #2]
     a26:	490e      	ldr	r1, [pc, #56]	; (a60 <system_gclk_chan_disable+0x50>)
     a28:	400b      	ands	r3, r1
     a2a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     a2c:	8853      	ldrh	r3, [r2, #2]
     a2e:	490d      	ldr	r1, [pc, #52]	; (a64 <system_gclk_chan_disable+0x54>)
     a30:	400b      	ands	r3, r1
     a32:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     a34:	0011      	movs	r1, r2
     a36:	2280      	movs	r2, #128	; 0x80
     a38:	01d2      	lsls	r2, r2, #7
     a3a:	884b      	ldrh	r3, [r1, #2]
     a3c:	4213      	tst	r3, r2
     a3e:	d1fc      	bne.n	a3a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     a40:	4906      	ldr	r1, [pc, #24]	; (a5c <system_gclk_chan_disable+0x4c>)
     a42:	884a      	ldrh	r2, [r1, #2]
     a44:	0203      	lsls	r3, r0, #8
     a46:	4806      	ldr	r0, [pc, #24]	; (a60 <system_gclk_chan_disable+0x50>)
     a48:	4002      	ands	r2, r0
     a4a:	4313      	orrs	r3, r2
     a4c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     a4e:	4b06      	ldr	r3, [pc, #24]	; (a68 <system_gclk_chan_disable+0x58>)
     a50:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     a52:	bd10      	pop	{r4, pc}
     a54:	000005e9 	.word	0x000005e9
     a58:	40000c02 	.word	0x40000c02
     a5c:	40000c00 	.word	0x40000c00
     a60:	fffff0ff 	.word	0xfffff0ff
     a64:	ffffbfff 	.word	0xffffbfff
     a68:	00000629 	.word	0x00000629

00000a6c <system_gclk_chan_set_config>:
{
     a6c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     a6e:	780c      	ldrb	r4, [r1, #0]
     a70:	0224      	lsls	r4, r4, #8
     a72:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     a74:	4b02      	ldr	r3, [pc, #8]	; (a80 <system_gclk_chan_set_config+0x14>)
     a76:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     a78:	b2a4      	uxth	r4, r4
     a7a:	4b02      	ldr	r3, [pc, #8]	; (a84 <system_gclk_chan_set_config+0x18>)
     a7c:	805c      	strh	r4, [r3, #2]
}
     a7e:	bd10      	pop	{r4, pc}
     a80:	00000a11 	.word	0x00000a11
     a84:	40000c00 	.word	0x40000c00

00000a88 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     a88:	b510      	push	{r4, lr}
     a8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     a8c:	4b06      	ldr	r3, [pc, #24]	; (aa8 <system_gclk_chan_get_hz+0x20>)
     a8e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     a90:	4b06      	ldr	r3, [pc, #24]	; (aac <system_gclk_chan_get_hz+0x24>)
     a92:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     a94:	4b06      	ldr	r3, [pc, #24]	; (ab0 <system_gclk_chan_get_hz+0x28>)
     a96:	885c      	ldrh	r4, [r3, #2]
     a98:	0524      	lsls	r4, r4, #20
     a9a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     a9c:	4b05      	ldr	r3, [pc, #20]	; (ab4 <system_gclk_chan_get_hz+0x2c>)
     a9e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     aa0:	0020      	movs	r0, r4
     aa2:	4b05      	ldr	r3, [pc, #20]	; (ab8 <system_gclk_chan_get_hz+0x30>)
     aa4:	4798      	blx	r3
}
     aa6:	bd10      	pop	{r4, pc}
     aa8:	000005e9 	.word	0x000005e9
     aac:	40000c02 	.word	0x40000c02
     ab0:	40000c00 	.word	0x40000c00
     ab4:	00000629 	.word	0x00000629
     ab8:	00000985 	.word	0x00000985

00000abc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     abc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     abe:	78d3      	ldrb	r3, [r2, #3]
     ac0:	2b00      	cmp	r3, #0
     ac2:	d135      	bne.n	b30 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     ac4:	7813      	ldrb	r3, [r2, #0]
     ac6:	2b80      	cmp	r3, #128	; 0x80
     ac8:	d029      	beq.n	b1e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     aca:	061b      	lsls	r3, r3, #24
     acc:	2480      	movs	r4, #128	; 0x80
     ace:	0264      	lsls	r4, r4, #9
     ad0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     ad2:	7854      	ldrb	r4, [r2, #1]
     ad4:	2502      	movs	r5, #2
     ad6:	43ac      	bics	r4, r5
     ad8:	d106      	bne.n	ae8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     ada:	7894      	ldrb	r4, [r2, #2]
     adc:	2c00      	cmp	r4, #0
     ade:	d120      	bne.n	b22 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     ae0:	2480      	movs	r4, #128	; 0x80
     ae2:	02a4      	lsls	r4, r4, #10
     ae4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     ae6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     ae8:	7854      	ldrb	r4, [r2, #1]
     aea:	3c01      	subs	r4, #1
     aec:	2c01      	cmp	r4, #1
     aee:	d91c      	bls.n	b2a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     af0:	040d      	lsls	r5, r1, #16
     af2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     af4:	24a0      	movs	r4, #160	; 0xa0
     af6:	05e4      	lsls	r4, r4, #23
     af8:	432c      	orrs	r4, r5
     afa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     afc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     afe:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     b00:	24d0      	movs	r4, #208	; 0xd0
     b02:	0624      	lsls	r4, r4, #24
     b04:	432c      	orrs	r4, r5
     b06:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     b08:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     b0a:	78d4      	ldrb	r4, [r2, #3]
     b0c:	2c00      	cmp	r4, #0
     b0e:	d122      	bne.n	b56 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     b10:	035b      	lsls	r3, r3, #13
     b12:	d51c      	bpl.n	b4e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     b14:	7893      	ldrb	r3, [r2, #2]
     b16:	2b01      	cmp	r3, #1
     b18:	d01e      	beq.n	b58 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     b1a:	6141      	str	r1, [r0, #20]
     b1c:	e017      	b.n	b4e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     b1e:	2300      	movs	r3, #0
     b20:	e7d7      	b.n	ad2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     b22:	24c0      	movs	r4, #192	; 0xc0
     b24:	02e4      	lsls	r4, r4, #11
     b26:	4323      	orrs	r3, r4
     b28:	e7dd      	b.n	ae6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     b2a:	4c0d      	ldr	r4, [pc, #52]	; (b60 <_system_pinmux_config+0xa4>)
     b2c:	4023      	ands	r3, r4
     b2e:	e7df      	b.n	af0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     b30:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     b32:	040c      	lsls	r4, r1, #16
     b34:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     b36:	23a0      	movs	r3, #160	; 0xa0
     b38:	05db      	lsls	r3, r3, #23
     b3a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     b3c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     b3e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     b40:	23d0      	movs	r3, #208	; 0xd0
     b42:	061b      	lsls	r3, r3, #24
     b44:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     b46:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     b48:	78d3      	ldrb	r3, [r2, #3]
     b4a:	2b00      	cmp	r3, #0
     b4c:	d103      	bne.n	b56 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     b4e:	7853      	ldrb	r3, [r2, #1]
     b50:	3b01      	subs	r3, #1
     b52:	2b01      	cmp	r3, #1
     b54:	d902      	bls.n	b5c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     b56:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     b58:	6181      	str	r1, [r0, #24]
     b5a:	e7f8      	b.n	b4e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     b5c:	6081      	str	r1, [r0, #8]
}
     b5e:	e7fa      	b.n	b56 <_system_pinmux_config+0x9a>
     b60:	fffbffff 	.word	0xfffbffff

00000b64 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     b64:	b510      	push	{r4, lr}
     b66:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b68:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     b6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b6c:	2900      	cmp	r1, #0
     b6e:	d104      	bne.n	b7a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     b70:	0943      	lsrs	r3, r0, #5
     b72:	01db      	lsls	r3, r3, #7
     b74:	4905      	ldr	r1, [pc, #20]	; (b8c <system_pinmux_pin_set_config+0x28>)
     b76:	468c      	mov	ip, r1
     b78:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     b7a:	241f      	movs	r4, #31
     b7c:	4020      	ands	r0, r4
     b7e:	2101      	movs	r1, #1
     b80:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     b82:	0018      	movs	r0, r3
     b84:	4b02      	ldr	r3, [pc, #8]	; (b90 <system_pinmux_pin_set_config+0x2c>)
     b86:	4798      	blx	r3
}
     b88:	bd10      	pop	{r4, pc}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	41004400 	.word	0x41004400
     b90:	00000abd 	.word	0x00000abd

00000b94 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     b94:	4770      	bx	lr
	...

00000b98 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     b98:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     b9a:	4b05      	ldr	r3, [pc, #20]	; (bb0 <system_init+0x18>)
     b9c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     b9e:	4b05      	ldr	r3, [pc, #20]	; (bb4 <system_init+0x1c>)
     ba0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     ba2:	4b05      	ldr	r3, [pc, #20]	; (bb8 <system_init+0x20>)
     ba4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     ba6:	4b05      	ldr	r3, [pc, #20]	; (bbc <system_init+0x24>)
     ba8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     baa:	4b05      	ldr	r3, [pc, #20]	; (bc0 <system_init+0x28>)
     bac:	4798      	blx	r3
}
     bae:	bd10      	pop	{r4, pc}
     bb0:	000007cd 	.word	0x000007cd
     bb4:	000005e5 	.word	0x000005e5
     bb8:	00000b95 	.word	0x00000b95
     bbc:	00000b95 	.word	0x00000b95
     bc0:	00000b95 	.word	0x00000b95

00000bc4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     bc4:	e7fe      	b.n	bc4 <Dummy_Handler>
	...

00000bc8 <Reset_Handler>:
{
     bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     bca:	4a2a      	ldr	r2, [pc, #168]	; (c74 <Reset_Handler+0xac>)
     bcc:	4b2a      	ldr	r3, [pc, #168]	; (c78 <Reset_Handler+0xb0>)
     bce:	429a      	cmp	r2, r3
     bd0:	d011      	beq.n	bf6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     bd2:	001a      	movs	r2, r3
     bd4:	4b29      	ldr	r3, [pc, #164]	; (c7c <Reset_Handler+0xb4>)
     bd6:	429a      	cmp	r2, r3
     bd8:	d20d      	bcs.n	bf6 <Reset_Handler+0x2e>
     bda:	4a29      	ldr	r2, [pc, #164]	; (c80 <Reset_Handler+0xb8>)
     bdc:	3303      	adds	r3, #3
     bde:	1a9b      	subs	r3, r3, r2
     be0:	089b      	lsrs	r3, r3, #2
     be2:	3301      	adds	r3, #1
     be4:	009b      	lsls	r3, r3, #2
     be6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     be8:	4823      	ldr	r0, [pc, #140]	; (c78 <Reset_Handler+0xb0>)
     bea:	4922      	ldr	r1, [pc, #136]	; (c74 <Reset_Handler+0xac>)
     bec:	588c      	ldr	r4, [r1, r2]
     bee:	5084      	str	r4, [r0, r2]
     bf0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     bf2:	429a      	cmp	r2, r3
     bf4:	d1fa      	bne.n	bec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     bf6:	4a23      	ldr	r2, [pc, #140]	; (c84 <Reset_Handler+0xbc>)
     bf8:	4b23      	ldr	r3, [pc, #140]	; (c88 <Reset_Handler+0xc0>)
     bfa:	429a      	cmp	r2, r3
     bfc:	d20a      	bcs.n	c14 <Reset_Handler+0x4c>
     bfe:	43d3      	mvns	r3, r2
     c00:	4921      	ldr	r1, [pc, #132]	; (c88 <Reset_Handler+0xc0>)
     c02:	185b      	adds	r3, r3, r1
     c04:	2103      	movs	r1, #3
     c06:	438b      	bics	r3, r1
     c08:	3304      	adds	r3, #4
     c0a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     c0c:	2100      	movs	r1, #0
     c0e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     c10:	4293      	cmp	r3, r2
     c12:	d1fc      	bne.n	c0e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     c14:	4a1d      	ldr	r2, [pc, #116]	; (c8c <Reset_Handler+0xc4>)
     c16:	21ff      	movs	r1, #255	; 0xff
     c18:	4b1d      	ldr	r3, [pc, #116]	; (c90 <Reset_Handler+0xc8>)
     c1a:	438b      	bics	r3, r1
     c1c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     c1e:	39fd      	subs	r1, #253	; 0xfd
     c20:	2390      	movs	r3, #144	; 0x90
     c22:	005b      	lsls	r3, r3, #1
     c24:	4a1b      	ldr	r2, [pc, #108]	; (c94 <Reset_Handler+0xcc>)
     c26:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     c28:	4a1b      	ldr	r2, [pc, #108]	; (c98 <Reset_Handler+0xd0>)
     c2a:	78d3      	ldrb	r3, [r2, #3]
     c2c:	2503      	movs	r5, #3
     c2e:	43ab      	bics	r3, r5
     c30:	2402      	movs	r4, #2
     c32:	4323      	orrs	r3, r4
     c34:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     c36:	78d3      	ldrb	r3, [r2, #3]
     c38:	270c      	movs	r7, #12
     c3a:	43bb      	bics	r3, r7
     c3c:	2608      	movs	r6, #8
     c3e:	4333      	orrs	r3, r6
     c40:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     c42:	4b16      	ldr	r3, [pc, #88]	; (c9c <Reset_Handler+0xd4>)
     c44:	7b98      	ldrb	r0, [r3, #14]
     c46:	2230      	movs	r2, #48	; 0x30
     c48:	4390      	bics	r0, r2
     c4a:	2220      	movs	r2, #32
     c4c:	4310      	orrs	r0, r2
     c4e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     c50:	7b99      	ldrb	r1, [r3, #14]
     c52:	43b9      	bics	r1, r7
     c54:	4331      	orrs	r1, r6
     c56:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     c58:	7b9a      	ldrb	r2, [r3, #14]
     c5a:	43aa      	bics	r2, r5
     c5c:	4322      	orrs	r2, r4
     c5e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     c60:	4a0f      	ldr	r2, [pc, #60]	; (ca0 <Reset_Handler+0xd8>)
     c62:	6853      	ldr	r3, [r2, #4]
     c64:	2180      	movs	r1, #128	; 0x80
     c66:	430b      	orrs	r3, r1
     c68:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     c6a:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <Reset_Handler+0xdc>)
     c6c:	4798      	blx	r3
        main();
     c6e:	4b0e      	ldr	r3, [pc, #56]	; (ca8 <Reset_Handler+0xe0>)
     c70:	4798      	blx	r3
     c72:	e7fe      	b.n	c72 <Reset_Handler+0xaa>
     c74:	00001928 	.word	0x00001928
     c78:	20000000 	.word	0x20000000
     c7c:	2000000c 	.word	0x2000000c
     c80:	20000004 	.word	0x20000004
     c84:	2000000c 	.word	0x2000000c
     c88:	20000060 	.word	0x20000060
     c8c:	e000ed00 	.word	0xe000ed00
     c90:	00000000 	.word	0x00000000
     c94:	41007000 	.word	0x41007000
     c98:	41005000 	.word	0x41005000
     c9c:	41004800 	.word	0x41004800
     ca0:	41004000 	.word	0x41004000
     ca4:	00001861 	.word	0x00001861
     ca8:	00000cad 	.word	0x00000cad

00000cac <main>:
#include <asf.h>
#include "lcd1602.h"
#include "ad9851.h"

int main (void)
{
     cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cae:	46ce      	mov	lr, r9
     cb0:	4647      	mov	r7, r8
     cb2:	b580      	push	{r7, lr}
	system_init();
     cb4:	4b13      	ldr	r3, [pc, #76]	; (d04 <main+0x58>)
     cb6:	4798      	blx	r3
	delay_init();
     cb8:	4b13      	ldr	r3, [pc, #76]	; (d08 <main+0x5c>)
     cba:	4798      	blx	r3
	
	ad9851_init();
     cbc:	4b13      	ldr	r3, [pc, #76]	; (d0c <main+0x60>)
     cbe:	4798      	blx	r3
	int counter = 54000000;
	int step = 1;
	char buffer[32];
	delay_ms(20);
     cc0:	2014      	movs	r0, #20
     cc2:	4b13      	ldr	r3, [pc, #76]	; (d10 <main+0x64>)
     cc4:	4798      	blx	r3
	
	lcd_init();
     cc6:	4b13      	ldr	r3, [pc, #76]	; (d14 <main+0x68>)
     cc8:	4798      	blx	r3
	
	//Goto Line-1,first position
	lcd_cmd(0x80);
     cca:	2080      	movs	r0, #128	; 0x80
     ccc:	4d12      	ldr	r5, [pc, #72]	; (d18 <main+0x6c>)
     cce:	47a8      	blx	r5
	lcd_send_string("HELLO");
     cd0:	4812      	ldr	r0, [pc, #72]	; (d1c <main+0x70>)
     cd2:	4c13      	ldr	r4, [pc, #76]	; (d20 <main+0x74>)
     cd4:	47a0      	blx	r4
	//Goto Line-2, first position
	lcd_cmd(0xC0);
     cd6:	20c0      	movs	r0, #192	; 0xc0
     cd8:	47a8      	blx	r5
	lcd_send_string("world   0x2A");
     cda:	4812      	ldr	r0, [pc, #72]	; (d24 <main+0x78>)
     cdc:	47a0      	blx	r4
	
	
	step = 100000;
     cde:	4d12      	ldr	r5, [pc, #72]	; (d28 <main+0x7c>)
	int counter = 54000000;
     ce0:	4c12      	ldr	r4, [pc, #72]	; (d2c <main+0x80>)


	while (1)
	{
		delay_ms(250);
     ce2:	4b0b      	ldr	r3, [pc, #44]	; (d10 <main+0x64>)
     ce4:	4699      	mov	r9, r3
		/*lcd_set_line(2);
		sprintf(buffer,"0x2A = %d",step);
		lcd_send_string(buffer);*/
		step = step * (-1);//step + 25;
		counter = counter + step;
		send_word(calc_word((double)counter));
     ce6:	4b12      	ldr	r3, [pc, #72]	; (d30 <main+0x84>)
     ce8:	4698      	mov	r8, r3
     cea:	4f12      	ldr	r7, [pc, #72]	; (d34 <main+0x88>)
		delay_ms(250);
     cec:	20fa      	movs	r0, #250	; 0xfa
     cee:	47c8      	blx	r9
		step = step * (-1);//step + 25;
     cf0:	426e      	negs	r6, r5
		counter = counter + step;
     cf2:	1b64      	subs	r4, r4, r5
		send_word(calc_word((double)counter));
     cf4:	0020      	movs	r0, r4
     cf6:	47c0      	blx	r8
     cf8:	47b8      	blx	r7
     cfa:	4b0f      	ldr	r3, [pc, #60]	; (d38 <main+0x8c>)
     cfc:	4798      	blx	r3
		step = step * (-1);//step + 25;
     cfe:	0035      	movs	r5, r6
     d00:	e7f4      	b.n	cec <main+0x40>
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000b99 	.word	0x00000b99
     d08:	000004c9 	.word	0x000004c9
     d0c:	00000129 	.word	0x00000129
     d10:	00000535 	.word	0x00000535
     d14:	00000495 	.word	0x00000495
     d18:	00000275 	.word	0x00000275
     d1c:	000018f0 	.word	0x000018f0
     d20:	0000041d 	.word	0x0000041d
     d24:	000018f8 	.word	0x000018f8
     d28:	000186a0 	.word	0x000186a0
     d2c:	0337f980 	.word	0x0337f980
     d30:	00001525 	.word	0x00001525
     d34:	00000115 	.word	0x00000115
     d38:	00000239 	.word	0x00000239

00000d3c <__udivsi3>:
     d3c:	2200      	movs	r2, #0
     d3e:	0843      	lsrs	r3, r0, #1
     d40:	428b      	cmp	r3, r1
     d42:	d374      	bcc.n	e2e <__udivsi3+0xf2>
     d44:	0903      	lsrs	r3, r0, #4
     d46:	428b      	cmp	r3, r1
     d48:	d35f      	bcc.n	e0a <__udivsi3+0xce>
     d4a:	0a03      	lsrs	r3, r0, #8
     d4c:	428b      	cmp	r3, r1
     d4e:	d344      	bcc.n	dda <__udivsi3+0x9e>
     d50:	0b03      	lsrs	r3, r0, #12
     d52:	428b      	cmp	r3, r1
     d54:	d328      	bcc.n	da8 <__udivsi3+0x6c>
     d56:	0c03      	lsrs	r3, r0, #16
     d58:	428b      	cmp	r3, r1
     d5a:	d30d      	bcc.n	d78 <__udivsi3+0x3c>
     d5c:	22ff      	movs	r2, #255	; 0xff
     d5e:	0209      	lsls	r1, r1, #8
     d60:	ba12      	rev	r2, r2
     d62:	0c03      	lsrs	r3, r0, #16
     d64:	428b      	cmp	r3, r1
     d66:	d302      	bcc.n	d6e <__udivsi3+0x32>
     d68:	1212      	asrs	r2, r2, #8
     d6a:	0209      	lsls	r1, r1, #8
     d6c:	d065      	beq.n	e3a <__udivsi3+0xfe>
     d6e:	0b03      	lsrs	r3, r0, #12
     d70:	428b      	cmp	r3, r1
     d72:	d319      	bcc.n	da8 <__udivsi3+0x6c>
     d74:	e000      	b.n	d78 <__udivsi3+0x3c>
     d76:	0a09      	lsrs	r1, r1, #8
     d78:	0bc3      	lsrs	r3, r0, #15
     d7a:	428b      	cmp	r3, r1
     d7c:	d301      	bcc.n	d82 <__udivsi3+0x46>
     d7e:	03cb      	lsls	r3, r1, #15
     d80:	1ac0      	subs	r0, r0, r3
     d82:	4152      	adcs	r2, r2
     d84:	0b83      	lsrs	r3, r0, #14
     d86:	428b      	cmp	r3, r1
     d88:	d301      	bcc.n	d8e <__udivsi3+0x52>
     d8a:	038b      	lsls	r3, r1, #14
     d8c:	1ac0      	subs	r0, r0, r3
     d8e:	4152      	adcs	r2, r2
     d90:	0b43      	lsrs	r3, r0, #13
     d92:	428b      	cmp	r3, r1
     d94:	d301      	bcc.n	d9a <__udivsi3+0x5e>
     d96:	034b      	lsls	r3, r1, #13
     d98:	1ac0      	subs	r0, r0, r3
     d9a:	4152      	adcs	r2, r2
     d9c:	0b03      	lsrs	r3, r0, #12
     d9e:	428b      	cmp	r3, r1
     da0:	d301      	bcc.n	da6 <__udivsi3+0x6a>
     da2:	030b      	lsls	r3, r1, #12
     da4:	1ac0      	subs	r0, r0, r3
     da6:	4152      	adcs	r2, r2
     da8:	0ac3      	lsrs	r3, r0, #11
     daa:	428b      	cmp	r3, r1
     dac:	d301      	bcc.n	db2 <__udivsi3+0x76>
     dae:	02cb      	lsls	r3, r1, #11
     db0:	1ac0      	subs	r0, r0, r3
     db2:	4152      	adcs	r2, r2
     db4:	0a83      	lsrs	r3, r0, #10
     db6:	428b      	cmp	r3, r1
     db8:	d301      	bcc.n	dbe <__udivsi3+0x82>
     dba:	028b      	lsls	r3, r1, #10
     dbc:	1ac0      	subs	r0, r0, r3
     dbe:	4152      	adcs	r2, r2
     dc0:	0a43      	lsrs	r3, r0, #9
     dc2:	428b      	cmp	r3, r1
     dc4:	d301      	bcc.n	dca <__udivsi3+0x8e>
     dc6:	024b      	lsls	r3, r1, #9
     dc8:	1ac0      	subs	r0, r0, r3
     dca:	4152      	adcs	r2, r2
     dcc:	0a03      	lsrs	r3, r0, #8
     dce:	428b      	cmp	r3, r1
     dd0:	d301      	bcc.n	dd6 <__udivsi3+0x9a>
     dd2:	020b      	lsls	r3, r1, #8
     dd4:	1ac0      	subs	r0, r0, r3
     dd6:	4152      	adcs	r2, r2
     dd8:	d2cd      	bcs.n	d76 <__udivsi3+0x3a>
     dda:	09c3      	lsrs	r3, r0, #7
     ddc:	428b      	cmp	r3, r1
     dde:	d301      	bcc.n	de4 <__udivsi3+0xa8>
     de0:	01cb      	lsls	r3, r1, #7
     de2:	1ac0      	subs	r0, r0, r3
     de4:	4152      	adcs	r2, r2
     de6:	0983      	lsrs	r3, r0, #6
     de8:	428b      	cmp	r3, r1
     dea:	d301      	bcc.n	df0 <__udivsi3+0xb4>
     dec:	018b      	lsls	r3, r1, #6
     dee:	1ac0      	subs	r0, r0, r3
     df0:	4152      	adcs	r2, r2
     df2:	0943      	lsrs	r3, r0, #5
     df4:	428b      	cmp	r3, r1
     df6:	d301      	bcc.n	dfc <__udivsi3+0xc0>
     df8:	014b      	lsls	r3, r1, #5
     dfa:	1ac0      	subs	r0, r0, r3
     dfc:	4152      	adcs	r2, r2
     dfe:	0903      	lsrs	r3, r0, #4
     e00:	428b      	cmp	r3, r1
     e02:	d301      	bcc.n	e08 <__udivsi3+0xcc>
     e04:	010b      	lsls	r3, r1, #4
     e06:	1ac0      	subs	r0, r0, r3
     e08:	4152      	adcs	r2, r2
     e0a:	08c3      	lsrs	r3, r0, #3
     e0c:	428b      	cmp	r3, r1
     e0e:	d301      	bcc.n	e14 <__udivsi3+0xd8>
     e10:	00cb      	lsls	r3, r1, #3
     e12:	1ac0      	subs	r0, r0, r3
     e14:	4152      	adcs	r2, r2
     e16:	0883      	lsrs	r3, r0, #2
     e18:	428b      	cmp	r3, r1
     e1a:	d301      	bcc.n	e20 <__udivsi3+0xe4>
     e1c:	008b      	lsls	r3, r1, #2
     e1e:	1ac0      	subs	r0, r0, r3
     e20:	4152      	adcs	r2, r2
     e22:	0843      	lsrs	r3, r0, #1
     e24:	428b      	cmp	r3, r1
     e26:	d301      	bcc.n	e2c <__udivsi3+0xf0>
     e28:	004b      	lsls	r3, r1, #1
     e2a:	1ac0      	subs	r0, r0, r3
     e2c:	4152      	adcs	r2, r2
     e2e:	1a41      	subs	r1, r0, r1
     e30:	d200      	bcs.n	e34 <__udivsi3+0xf8>
     e32:	4601      	mov	r1, r0
     e34:	4152      	adcs	r2, r2
     e36:	4610      	mov	r0, r2
     e38:	4770      	bx	lr
     e3a:	e7ff      	b.n	e3c <__udivsi3+0x100>
     e3c:	b501      	push	{r0, lr}
     e3e:	2000      	movs	r0, #0
     e40:	f000 f806 	bl	e50 <__aeabi_idiv0>
     e44:	bd02      	pop	{r1, pc}
     e46:	46c0      	nop			; (mov r8, r8)

00000e48 <__aeabi_uidivmod>:
     e48:	2900      	cmp	r1, #0
     e4a:	d0f7      	beq.n	e3c <__udivsi3+0x100>
     e4c:	e776      	b.n	d3c <__udivsi3>
     e4e:	4770      	bx	lr

00000e50 <__aeabi_idiv0>:
     e50:	4770      	bx	lr
     e52:	46c0      	nop			; (mov r8, r8)

00000e54 <__aeabi_d2uiz>:
     e54:	b570      	push	{r4, r5, r6, lr}
     e56:	2200      	movs	r2, #0
     e58:	4b0c      	ldr	r3, [pc, #48]	; (e8c <__aeabi_d2uiz+0x38>)
     e5a:	0004      	movs	r4, r0
     e5c:	000d      	movs	r5, r1
     e5e:	f000 fbd7 	bl	1610 <__aeabi_dcmpge>
     e62:	2800      	cmp	r0, #0
     e64:	d104      	bne.n	e70 <__aeabi_d2uiz+0x1c>
     e66:	0020      	movs	r0, r4
     e68:	0029      	movs	r1, r5
     e6a:	f000 fb27 	bl	14bc <__aeabi_d2iz>
     e6e:	bd70      	pop	{r4, r5, r6, pc}
     e70:	4b06      	ldr	r3, [pc, #24]	; (e8c <__aeabi_d2uiz+0x38>)
     e72:	2200      	movs	r2, #0
     e74:	0020      	movs	r0, r4
     e76:	0029      	movs	r1, r5
     e78:	f000 f80a 	bl	e90 <__aeabi_dsub>
     e7c:	f000 fb1e 	bl	14bc <__aeabi_d2iz>
     e80:	2380      	movs	r3, #128	; 0x80
     e82:	061b      	lsls	r3, r3, #24
     e84:	469c      	mov	ip, r3
     e86:	4460      	add	r0, ip
     e88:	e7f1      	b.n	e6e <__aeabi_d2uiz+0x1a>
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	41e00000 	.word	0x41e00000

00000e90 <__aeabi_dsub>:
     e90:	b5f0      	push	{r4, r5, r6, r7, lr}
     e92:	4646      	mov	r6, r8
     e94:	46d6      	mov	lr, sl
     e96:	464f      	mov	r7, r9
     e98:	030c      	lsls	r4, r1, #12
     e9a:	b5c0      	push	{r6, r7, lr}
     e9c:	0fcd      	lsrs	r5, r1, #31
     e9e:	004e      	lsls	r6, r1, #1
     ea0:	0a61      	lsrs	r1, r4, #9
     ea2:	0f44      	lsrs	r4, r0, #29
     ea4:	430c      	orrs	r4, r1
     ea6:	00c1      	lsls	r1, r0, #3
     ea8:	0058      	lsls	r0, r3, #1
     eaa:	0d40      	lsrs	r0, r0, #21
     eac:	4684      	mov	ip, r0
     eae:	468a      	mov	sl, r1
     eb0:	000f      	movs	r7, r1
     eb2:	0319      	lsls	r1, r3, #12
     eb4:	0f50      	lsrs	r0, r2, #29
     eb6:	0a49      	lsrs	r1, r1, #9
     eb8:	4301      	orrs	r1, r0
     eba:	48c6      	ldr	r0, [pc, #792]	; (11d4 <__aeabi_dsub+0x344>)
     ebc:	0d76      	lsrs	r6, r6, #21
     ebe:	46a8      	mov	r8, r5
     ec0:	0fdb      	lsrs	r3, r3, #31
     ec2:	00d2      	lsls	r2, r2, #3
     ec4:	4584      	cmp	ip, r0
     ec6:	d100      	bne.n	eca <__aeabi_dsub+0x3a>
     ec8:	e0d8      	b.n	107c <__aeabi_dsub+0x1ec>
     eca:	2001      	movs	r0, #1
     ecc:	4043      	eors	r3, r0
     ece:	42ab      	cmp	r3, r5
     ed0:	d100      	bne.n	ed4 <__aeabi_dsub+0x44>
     ed2:	e0a6      	b.n	1022 <__aeabi_dsub+0x192>
     ed4:	4660      	mov	r0, ip
     ed6:	1a35      	subs	r5, r6, r0
     ed8:	2d00      	cmp	r5, #0
     eda:	dc00      	bgt.n	ede <__aeabi_dsub+0x4e>
     edc:	e105      	b.n	10ea <__aeabi_dsub+0x25a>
     ede:	2800      	cmp	r0, #0
     ee0:	d110      	bne.n	f04 <__aeabi_dsub+0x74>
     ee2:	000b      	movs	r3, r1
     ee4:	4313      	orrs	r3, r2
     ee6:	d100      	bne.n	eea <__aeabi_dsub+0x5a>
     ee8:	e0d7      	b.n	109a <__aeabi_dsub+0x20a>
     eea:	1e6b      	subs	r3, r5, #1
     eec:	2b00      	cmp	r3, #0
     eee:	d000      	beq.n	ef2 <__aeabi_dsub+0x62>
     ef0:	e14b      	b.n	118a <__aeabi_dsub+0x2fa>
     ef2:	4653      	mov	r3, sl
     ef4:	1a9f      	subs	r7, r3, r2
     ef6:	45ba      	cmp	sl, r7
     ef8:	4180      	sbcs	r0, r0
     efa:	1a64      	subs	r4, r4, r1
     efc:	4240      	negs	r0, r0
     efe:	1a24      	subs	r4, r4, r0
     f00:	2601      	movs	r6, #1
     f02:	e01e      	b.n	f42 <__aeabi_dsub+0xb2>
     f04:	4bb3      	ldr	r3, [pc, #716]	; (11d4 <__aeabi_dsub+0x344>)
     f06:	429e      	cmp	r6, r3
     f08:	d048      	beq.n	f9c <__aeabi_dsub+0x10c>
     f0a:	2380      	movs	r3, #128	; 0x80
     f0c:	041b      	lsls	r3, r3, #16
     f0e:	4319      	orrs	r1, r3
     f10:	2d38      	cmp	r5, #56	; 0x38
     f12:	dd00      	ble.n	f16 <__aeabi_dsub+0x86>
     f14:	e119      	b.n	114a <__aeabi_dsub+0x2ba>
     f16:	2d1f      	cmp	r5, #31
     f18:	dd00      	ble.n	f1c <__aeabi_dsub+0x8c>
     f1a:	e14c      	b.n	11b6 <__aeabi_dsub+0x326>
     f1c:	2320      	movs	r3, #32
     f1e:	000f      	movs	r7, r1
     f20:	1b5b      	subs	r3, r3, r5
     f22:	0010      	movs	r0, r2
     f24:	409a      	lsls	r2, r3
     f26:	409f      	lsls	r7, r3
     f28:	40e8      	lsrs	r0, r5
     f2a:	1e53      	subs	r3, r2, #1
     f2c:	419a      	sbcs	r2, r3
     f2e:	40e9      	lsrs	r1, r5
     f30:	4307      	orrs	r7, r0
     f32:	4317      	orrs	r7, r2
     f34:	4653      	mov	r3, sl
     f36:	1bdf      	subs	r7, r3, r7
     f38:	1a61      	subs	r1, r4, r1
     f3a:	45ba      	cmp	sl, r7
     f3c:	41a4      	sbcs	r4, r4
     f3e:	4264      	negs	r4, r4
     f40:	1b0c      	subs	r4, r1, r4
     f42:	0223      	lsls	r3, r4, #8
     f44:	d400      	bmi.n	f48 <__aeabi_dsub+0xb8>
     f46:	e0c5      	b.n	10d4 <__aeabi_dsub+0x244>
     f48:	0264      	lsls	r4, r4, #9
     f4a:	0a65      	lsrs	r5, r4, #9
     f4c:	2d00      	cmp	r5, #0
     f4e:	d100      	bne.n	f52 <__aeabi_dsub+0xc2>
     f50:	e0f6      	b.n	1140 <__aeabi_dsub+0x2b0>
     f52:	0028      	movs	r0, r5
     f54:	f000 fb66 	bl	1624 <__clzsi2>
     f58:	0003      	movs	r3, r0
     f5a:	3b08      	subs	r3, #8
     f5c:	2b1f      	cmp	r3, #31
     f5e:	dd00      	ble.n	f62 <__aeabi_dsub+0xd2>
     f60:	e0e9      	b.n	1136 <__aeabi_dsub+0x2a6>
     f62:	2220      	movs	r2, #32
     f64:	003c      	movs	r4, r7
     f66:	1ad2      	subs	r2, r2, r3
     f68:	409d      	lsls	r5, r3
     f6a:	40d4      	lsrs	r4, r2
     f6c:	409f      	lsls	r7, r3
     f6e:	4325      	orrs	r5, r4
     f70:	429e      	cmp	r6, r3
     f72:	dd00      	ble.n	f76 <__aeabi_dsub+0xe6>
     f74:	e0db      	b.n	112e <__aeabi_dsub+0x29e>
     f76:	1b9e      	subs	r6, r3, r6
     f78:	1c73      	adds	r3, r6, #1
     f7a:	2b1f      	cmp	r3, #31
     f7c:	dd00      	ble.n	f80 <__aeabi_dsub+0xf0>
     f7e:	e10a      	b.n	1196 <__aeabi_dsub+0x306>
     f80:	2220      	movs	r2, #32
     f82:	0038      	movs	r0, r7
     f84:	1ad2      	subs	r2, r2, r3
     f86:	0029      	movs	r1, r5
     f88:	4097      	lsls	r7, r2
     f8a:	002c      	movs	r4, r5
     f8c:	4091      	lsls	r1, r2
     f8e:	40d8      	lsrs	r0, r3
     f90:	1e7a      	subs	r2, r7, #1
     f92:	4197      	sbcs	r7, r2
     f94:	40dc      	lsrs	r4, r3
     f96:	2600      	movs	r6, #0
     f98:	4301      	orrs	r1, r0
     f9a:	430f      	orrs	r7, r1
     f9c:	077b      	lsls	r3, r7, #29
     f9e:	d009      	beq.n	fb4 <__aeabi_dsub+0x124>
     fa0:	230f      	movs	r3, #15
     fa2:	403b      	ands	r3, r7
     fa4:	2b04      	cmp	r3, #4
     fa6:	d005      	beq.n	fb4 <__aeabi_dsub+0x124>
     fa8:	1d3b      	adds	r3, r7, #4
     faa:	42bb      	cmp	r3, r7
     fac:	41bf      	sbcs	r7, r7
     fae:	427f      	negs	r7, r7
     fb0:	19e4      	adds	r4, r4, r7
     fb2:	001f      	movs	r7, r3
     fb4:	0223      	lsls	r3, r4, #8
     fb6:	d525      	bpl.n	1004 <__aeabi_dsub+0x174>
     fb8:	4b86      	ldr	r3, [pc, #536]	; (11d4 <__aeabi_dsub+0x344>)
     fba:	3601      	adds	r6, #1
     fbc:	429e      	cmp	r6, r3
     fbe:	d100      	bne.n	fc2 <__aeabi_dsub+0x132>
     fc0:	e0af      	b.n	1122 <__aeabi_dsub+0x292>
     fc2:	4b85      	ldr	r3, [pc, #532]	; (11d8 <__aeabi_dsub+0x348>)
     fc4:	2501      	movs	r5, #1
     fc6:	401c      	ands	r4, r3
     fc8:	4643      	mov	r3, r8
     fca:	0762      	lsls	r2, r4, #29
     fcc:	08ff      	lsrs	r7, r7, #3
     fce:	0264      	lsls	r4, r4, #9
     fd0:	0576      	lsls	r6, r6, #21
     fd2:	4317      	orrs	r7, r2
     fd4:	0b24      	lsrs	r4, r4, #12
     fd6:	0d76      	lsrs	r6, r6, #21
     fd8:	401d      	ands	r5, r3
     fda:	2100      	movs	r1, #0
     fdc:	0324      	lsls	r4, r4, #12
     fde:	0b23      	lsrs	r3, r4, #12
     fe0:	0d0c      	lsrs	r4, r1, #20
     fe2:	4a7e      	ldr	r2, [pc, #504]	; (11dc <__aeabi_dsub+0x34c>)
     fe4:	0524      	lsls	r4, r4, #20
     fe6:	431c      	orrs	r4, r3
     fe8:	4014      	ands	r4, r2
     fea:	0533      	lsls	r3, r6, #20
     fec:	4323      	orrs	r3, r4
     fee:	005b      	lsls	r3, r3, #1
     ff0:	07ed      	lsls	r5, r5, #31
     ff2:	085b      	lsrs	r3, r3, #1
     ff4:	432b      	orrs	r3, r5
     ff6:	0038      	movs	r0, r7
     ff8:	0019      	movs	r1, r3
     ffa:	bc1c      	pop	{r2, r3, r4}
     ffc:	4690      	mov	r8, r2
     ffe:	4699      	mov	r9, r3
    1000:	46a2      	mov	sl, r4
    1002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1004:	2501      	movs	r5, #1
    1006:	4643      	mov	r3, r8
    1008:	0762      	lsls	r2, r4, #29
    100a:	08ff      	lsrs	r7, r7, #3
    100c:	4317      	orrs	r7, r2
    100e:	08e4      	lsrs	r4, r4, #3
    1010:	401d      	ands	r5, r3
    1012:	4b70      	ldr	r3, [pc, #448]	; (11d4 <__aeabi_dsub+0x344>)
    1014:	429e      	cmp	r6, r3
    1016:	d036      	beq.n	1086 <__aeabi_dsub+0x1f6>
    1018:	0324      	lsls	r4, r4, #12
    101a:	0576      	lsls	r6, r6, #21
    101c:	0b24      	lsrs	r4, r4, #12
    101e:	0d76      	lsrs	r6, r6, #21
    1020:	e7db      	b.n	fda <__aeabi_dsub+0x14a>
    1022:	4663      	mov	r3, ip
    1024:	1af3      	subs	r3, r6, r3
    1026:	2b00      	cmp	r3, #0
    1028:	dc00      	bgt.n	102c <__aeabi_dsub+0x19c>
    102a:	e094      	b.n	1156 <__aeabi_dsub+0x2c6>
    102c:	4660      	mov	r0, ip
    102e:	2800      	cmp	r0, #0
    1030:	d035      	beq.n	109e <__aeabi_dsub+0x20e>
    1032:	4868      	ldr	r0, [pc, #416]	; (11d4 <__aeabi_dsub+0x344>)
    1034:	4286      	cmp	r6, r0
    1036:	d0b1      	beq.n	f9c <__aeabi_dsub+0x10c>
    1038:	2780      	movs	r7, #128	; 0x80
    103a:	043f      	lsls	r7, r7, #16
    103c:	4339      	orrs	r1, r7
    103e:	2b38      	cmp	r3, #56	; 0x38
    1040:	dc00      	bgt.n	1044 <__aeabi_dsub+0x1b4>
    1042:	e0fd      	b.n	1240 <__aeabi_dsub+0x3b0>
    1044:	430a      	orrs	r2, r1
    1046:	0017      	movs	r7, r2
    1048:	2100      	movs	r1, #0
    104a:	1e7a      	subs	r2, r7, #1
    104c:	4197      	sbcs	r7, r2
    104e:	4457      	add	r7, sl
    1050:	4557      	cmp	r7, sl
    1052:	4180      	sbcs	r0, r0
    1054:	1909      	adds	r1, r1, r4
    1056:	4244      	negs	r4, r0
    1058:	190c      	adds	r4, r1, r4
    105a:	0223      	lsls	r3, r4, #8
    105c:	d53a      	bpl.n	10d4 <__aeabi_dsub+0x244>
    105e:	4b5d      	ldr	r3, [pc, #372]	; (11d4 <__aeabi_dsub+0x344>)
    1060:	3601      	adds	r6, #1
    1062:	429e      	cmp	r6, r3
    1064:	d100      	bne.n	1068 <__aeabi_dsub+0x1d8>
    1066:	e14b      	b.n	1300 <__aeabi_dsub+0x470>
    1068:	2201      	movs	r2, #1
    106a:	4b5b      	ldr	r3, [pc, #364]	; (11d8 <__aeabi_dsub+0x348>)
    106c:	401c      	ands	r4, r3
    106e:	087b      	lsrs	r3, r7, #1
    1070:	4017      	ands	r7, r2
    1072:	431f      	orrs	r7, r3
    1074:	07e2      	lsls	r2, r4, #31
    1076:	4317      	orrs	r7, r2
    1078:	0864      	lsrs	r4, r4, #1
    107a:	e78f      	b.n	f9c <__aeabi_dsub+0x10c>
    107c:	0008      	movs	r0, r1
    107e:	4310      	orrs	r0, r2
    1080:	d000      	beq.n	1084 <__aeabi_dsub+0x1f4>
    1082:	e724      	b.n	ece <__aeabi_dsub+0x3e>
    1084:	e721      	b.n	eca <__aeabi_dsub+0x3a>
    1086:	0023      	movs	r3, r4
    1088:	433b      	orrs	r3, r7
    108a:	d100      	bne.n	108e <__aeabi_dsub+0x1fe>
    108c:	e1b9      	b.n	1402 <__aeabi_dsub+0x572>
    108e:	2280      	movs	r2, #128	; 0x80
    1090:	0312      	lsls	r2, r2, #12
    1092:	4314      	orrs	r4, r2
    1094:	0324      	lsls	r4, r4, #12
    1096:	0b24      	lsrs	r4, r4, #12
    1098:	e79f      	b.n	fda <__aeabi_dsub+0x14a>
    109a:	002e      	movs	r6, r5
    109c:	e77e      	b.n	f9c <__aeabi_dsub+0x10c>
    109e:	0008      	movs	r0, r1
    10a0:	4310      	orrs	r0, r2
    10a2:	d100      	bne.n	10a6 <__aeabi_dsub+0x216>
    10a4:	e0ca      	b.n	123c <__aeabi_dsub+0x3ac>
    10a6:	1e58      	subs	r0, r3, #1
    10a8:	4684      	mov	ip, r0
    10aa:	2800      	cmp	r0, #0
    10ac:	d000      	beq.n	10b0 <__aeabi_dsub+0x220>
    10ae:	e0e7      	b.n	1280 <__aeabi_dsub+0x3f0>
    10b0:	4452      	add	r2, sl
    10b2:	4552      	cmp	r2, sl
    10b4:	4180      	sbcs	r0, r0
    10b6:	1864      	adds	r4, r4, r1
    10b8:	4240      	negs	r0, r0
    10ba:	1824      	adds	r4, r4, r0
    10bc:	0017      	movs	r7, r2
    10be:	2601      	movs	r6, #1
    10c0:	0223      	lsls	r3, r4, #8
    10c2:	d507      	bpl.n	10d4 <__aeabi_dsub+0x244>
    10c4:	2602      	movs	r6, #2
    10c6:	e7cf      	b.n	1068 <__aeabi_dsub+0x1d8>
    10c8:	4664      	mov	r4, ip
    10ca:	432c      	orrs	r4, r5
    10cc:	d100      	bne.n	10d0 <__aeabi_dsub+0x240>
    10ce:	e1b3      	b.n	1438 <__aeabi_dsub+0x5a8>
    10d0:	002c      	movs	r4, r5
    10d2:	4667      	mov	r7, ip
    10d4:	077b      	lsls	r3, r7, #29
    10d6:	d000      	beq.n	10da <__aeabi_dsub+0x24a>
    10d8:	e762      	b.n	fa0 <__aeabi_dsub+0x110>
    10da:	0763      	lsls	r3, r4, #29
    10dc:	08ff      	lsrs	r7, r7, #3
    10de:	431f      	orrs	r7, r3
    10e0:	2501      	movs	r5, #1
    10e2:	4643      	mov	r3, r8
    10e4:	08e4      	lsrs	r4, r4, #3
    10e6:	401d      	ands	r5, r3
    10e8:	e793      	b.n	1012 <__aeabi_dsub+0x182>
    10ea:	2d00      	cmp	r5, #0
    10ec:	d178      	bne.n	11e0 <__aeabi_dsub+0x350>
    10ee:	1c75      	adds	r5, r6, #1
    10f0:	056d      	lsls	r5, r5, #21
    10f2:	0d6d      	lsrs	r5, r5, #21
    10f4:	2d01      	cmp	r5, #1
    10f6:	dc00      	bgt.n	10fa <__aeabi_dsub+0x26a>
    10f8:	e0f2      	b.n	12e0 <__aeabi_dsub+0x450>
    10fa:	4650      	mov	r0, sl
    10fc:	1a80      	subs	r0, r0, r2
    10fe:	4582      	cmp	sl, r0
    1100:	41bf      	sbcs	r7, r7
    1102:	1a65      	subs	r5, r4, r1
    1104:	427f      	negs	r7, r7
    1106:	1bed      	subs	r5, r5, r7
    1108:	4684      	mov	ip, r0
    110a:	0228      	lsls	r0, r5, #8
    110c:	d400      	bmi.n	1110 <__aeabi_dsub+0x280>
    110e:	e08c      	b.n	122a <__aeabi_dsub+0x39a>
    1110:	4650      	mov	r0, sl
    1112:	1a17      	subs	r7, r2, r0
    1114:	42ba      	cmp	r2, r7
    1116:	4192      	sbcs	r2, r2
    1118:	1b0c      	subs	r4, r1, r4
    111a:	4255      	negs	r5, r2
    111c:	1b65      	subs	r5, r4, r5
    111e:	4698      	mov	r8, r3
    1120:	e714      	b.n	f4c <__aeabi_dsub+0xbc>
    1122:	2501      	movs	r5, #1
    1124:	4643      	mov	r3, r8
    1126:	2400      	movs	r4, #0
    1128:	401d      	ands	r5, r3
    112a:	2700      	movs	r7, #0
    112c:	e755      	b.n	fda <__aeabi_dsub+0x14a>
    112e:	4c2a      	ldr	r4, [pc, #168]	; (11d8 <__aeabi_dsub+0x348>)
    1130:	1af6      	subs	r6, r6, r3
    1132:	402c      	ands	r4, r5
    1134:	e732      	b.n	f9c <__aeabi_dsub+0x10c>
    1136:	003d      	movs	r5, r7
    1138:	3828      	subs	r0, #40	; 0x28
    113a:	4085      	lsls	r5, r0
    113c:	2700      	movs	r7, #0
    113e:	e717      	b.n	f70 <__aeabi_dsub+0xe0>
    1140:	0038      	movs	r0, r7
    1142:	f000 fa6f 	bl	1624 <__clzsi2>
    1146:	3020      	adds	r0, #32
    1148:	e706      	b.n	f58 <__aeabi_dsub+0xc8>
    114a:	430a      	orrs	r2, r1
    114c:	0017      	movs	r7, r2
    114e:	2100      	movs	r1, #0
    1150:	1e7a      	subs	r2, r7, #1
    1152:	4197      	sbcs	r7, r2
    1154:	e6ee      	b.n	f34 <__aeabi_dsub+0xa4>
    1156:	2b00      	cmp	r3, #0
    1158:	d000      	beq.n	115c <__aeabi_dsub+0x2cc>
    115a:	e0e5      	b.n	1328 <__aeabi_dsub+0x498>
    115c:	1c73      	adds	r3, r6, #1
    115e:	469c      	mov	ip, r3
    1160:	055b      	lsls	r3, r3, #21
    1162:	0d5b      	lsrs	r3, r3, #21
    1164:	2b01      	cmp	r3, #1
    1166:	dc00      	bgt.n	116a <__aeabi_dsub+0x2da>
    1168:	e09f      	b.n	12aa <__aeabi_dsub+0x41a>
    116a:	4b1a      	ldr	r3, [pc, #104]	; (11d4 <__aeabi_dsub+0x344>)
    116c:	459c      	cmp	ip, r3
    116e:	d100      	bne.n	1172 <__aeabi_dsub+0x2e2>
    1170:	e0c5      	b.n	12fe <__aeabi_dsub+0x46e>
    1172:	4452      	add	r2, sl
    1174:	4552      	cmp	r2, sl
    1176:	4180      	sbcs	r0, r0
    1178:	1864      	adds	r4, r4, r1
    117a:	4240      	negs	r0, r0
    117c:	1824      	adds	r4, r4, r0
    117e:	07e7      	lsls	r7, r4, #31
    1180:	0852      	lsrs	r2, r2, #1
    1182:	4317      	orrs	r7, r2
    1184:	0864      	lsrs	r4, r4, #1
    1186:	4666      	mov	r6, ip
    1188:	e708      	b.n	f9c <__aeabi_dsub+0x10c>
    118a:	4812      	ldr	r0, [pc, #72]	; (11d4 <__aeabi_dsub+0x344>)
    118c:	4285      	cmp	r5, r0
    118e:	d100      	bne.n	1192 <__aeabi_dsub+0x302>
    1190:	e085      	b.n	129e <__aeabi_dsub+0x40e>
    1192:	001d      	movs	r5, r3
    1194:	e6bc      	b.n	f10 <__aeabi_dsub+0x80>
    1196:	0029      	movs	r1, r5
    1198:	3e1f      	subs	r6, #31
    119a:	40f1      	lsrs	r1, r6
    119c:	2b20      	cmp	r3, #32
    119e:	d100      	bne.n	11a2 <__aeabi_dsub+0x312>
    11a0:	e07f      	b.n	12a2 <__aeabi_dsub+0x412>
    11a2:	2240      	movs	r2, #64	; 0x40
    11a4:	1ad3      	subs	r3, r2, r3
    11a6:	409d      	lsls	r5, r3
    11a8:	432f      	orrs	r7, r5
    11aa:	1e7d      	subs	r5, r7, #1
    11ac:	41af      	sbcs	r7, r5
    11ae:	2400      	movs	r4, #0
    11b0:	430f      	orrs	r7, r1
    11b2:	2600      	movs	r6, #0
    11b4:	e78e      	b.n	10d4 <__aeabi_dsub+0x244>
    11b6:	002b      	movs	r3, r5
    11b8:	000f      	movs	r7, r1
    11ba:	3b20      	subs	r3, #32
    11bc:	40df      	lsrs	r7, r3
    11be:	2d20      	cmp	r5, #32
    11c0:	d071      	beq.n	12a6 <__aeabi_dsub+0x416>
    11c2:	2340      	movs	r3, #64	; 0x40
    11c4:	1b5d      	subs	r5, r3, r5
    11c6:	40a9      	lsls	r1, r5
    11c8:	430a      	orrs	r2, r1
    11ca:	1e51      	subs	r1, r2, #1
    11cc:	418a      	sbcs	r2, r1
    11ce:	2100      	movs	r1, #0
    11d0:	4317      	orrs	r7, r2
    11d2:	e6af      	b.n	f34 <__aeabi_dsub+0xa4>
    11d4:	000007ff 	.word	0x000007ff
    11d8:	ff7fffff 	.word	0xff7fffff
    11dc:	800fffff 	.word	0x800fffff
    11e0:	2e00      	cmp	r6, #0
    11e2:	d03e      	beq.n	1262 <__aeabi_dsub+0x3d2>
    11e4:	4eb3      	ldr	r6, [pc, #716]	; (14b4 <__aeabi_dsub+0x624>)
    11e6:	45b4      	cmp	ip, r6
    11e8:	d045      	beq.n	1276 <__aeabi_dsub+0x3e6>
    11ea:	2680      	movs	r6, #128	; 0x80
    11ec:	0436      	lsls	r6, r6, #16
    11ee:	426d      	negs	r5, r5
    11f0:	4334      	orrs	r4, r6
    11f2:	2d38      	cmp	r5, #56	; 0x38
    11f4:	dd00      	ble.n	11f8 <__aeabi_dsub+0x368>
    11f6:	e0a8      	b.n	134a <__aeabi_dsub+0x4ba>
    11f8:	2d1f      	cmp	r5, #31
    11fa:	dd00      	ble.n	11fe <__aeabi_dsub+0x36e>
    11fc:	e11f      	b.n	143e <__aeabi_dsub+0x5ae>
    11fe:	2620      	movs	r6, #32
    1200:	0027      	movs	r7, r4
    1202:	4650      	mov	r0, sl
    1204:	1b76      	subs	r6, r6, r5
    1206:	40b7      	lsls	r7, r6
    1208:	40e8      	lsrs	r0, r5
    120a:	4307      	orrs	r7, r0
    120c:	4650      	mov	r0, sl
    120e:	40b0      	lsls	r0, r6
    1210:	1e46      	subs	r6, r0, #1
    1212:	41b0      	sbcs	r0, r6
    1214:	40ec      	lsrs	r4, r5
    1216:	4338      	orrs	r0, r7
    1218:	1a17      	subs	r7, r2, r0
    121a:	42ba      	cmp	r2, r7
    121c:	4192      	sbcs	r2, r2
    121e:	1b0c      	subs	r4, r1, r4
    1220:	4252      	negs	r2, r2
    1222:	1aa4      	subs	r4, r4, r2
    1224:	4666      	mov	r6, ip
    1226:	4698      	mov	r8, r3
    1228:	e68b      	b.n	f42 <__aeabi_dsub+0xb2>
    122a:	4664      	mov	r4, ip
    122c:	4667      	mov	r7, ip
    122e:	432c      	orrs	r4, r5
    1230:	d000      	beq.n	1234 <__aeabi_dsub+0x3a4>
    1232:	e68b      	b.n	f4c <__aeabi_dsub+0xbc>
    1234:	2500      	movs	r5, #0
    1236:	2600      	movs	r6, #0
    1238:	2700      	movs	r7, #0
    123a:	e6ea      	b.n	1012 <__aeabi_dsub+0x182>
    123c:	001e      	movs	r6, r3
    123e:	e6ad      	b.n	f9c <__aeabi_dsub+0x10c>
    1240:	2b1f      	cmp	r3, #31
    1242:	dc60      	bgt.n	1306 <__aeabi_dsub+0x476>
    1244:	2720      	movs	r7, #32
    1246:	1af8      	subs	r0, r7, r3
    1248:	000f      	movs	r7, r1
    124a:	4684      	mov	ip, r0
    124c:	4087      	lsls	r7, r0
    124e:	0010      	movs	r0, r2
    1250:	40d8      	lsrs	r0, r3
    1252:	4307      	orrs	r7, r0
    1254:	4660      	mov	r0, ip
    1256:	4082      	lsls	r2, r0
    1258:	1e50      	subs	r0, r2, #1
    125a:	4182      	sbcs	r2, r0
    125c:	40d9      	lsrs	r1, r3
    125e:	4317      	orrs	r7, r2
    1260:	e6f5      	b.n	104e <__aeabi_dsub+0x1be>
    1262:	0026      	movs	r6, r4
    1264:	4650      	mov	r0, sl
    1266:	4306      	orrs	r6, r0
    1268:	d005      	beq.n	1276 <__aeabi_dsub+0x3e6>
    126a:	43ed      	mvns	r5, r5
    126c:	2d00      	cmp	r5, #0
    126e:	d0d3      	beq.n	1218 <__aeabi_dsub+0x388>
    1270:	4e90      	ldr	r6, [pc, #576]	; (14b4 <__aeabi_dsub+0x624>)
    1272:	45b4      	cmp	ip, r6
    1274:	d1bd      	bne.n	11f2 <__aeabi_dsub+0x362>
    1276:	000c      	movs	r4, r1
    1278:	0017      	movs	r7, r2
    127a:	4666      	mov	r6, ip
    127c:	4698      	mov	r8, r3
    127e:	e68d      	b.n	f9c <__aeabi_dsub+0x10c>
    1280:	488c      	ldr	r0, [pc, #560]	; (14b4 <__aeabi_dsub+0x624>)
    1282:	4283      	cmp	r3, r0
    1284:	d00b      	beq.n	129e <__aeabi_dsub+0x40e>
    1286:	4663      	mov	r3, ip
    1288:	e6d9      	b.n	103e <__aeabi_dsub+0x1ae>
    128a:	2d00      	cmp	r5, #0
    128c:	d000      	beq.n	1290 <__aeabi_dsub+0x400>
    128e:	e096      	b.n	13be <__aeabi_dsub+0x52e>
    1290:	0008      	movs	r0, r1
    1292:	4310      	orrs	r0, r2
    1294:	d100      	bne.n	1298 <__aeabi_dsub+0x408>
    1296:	e0e2      	b.n	145e <__aeabi_dsub+0x5ce>
    1298:	000c      	movs	r4, r1
    129a:	0017      	movs	r7, r2
    129c:	4698      	mov	r8, r3
    129e:	4e85      	ldr	r6, [pc, #532]	; (14b4 <__aeabi_dsub+0x624>)
    12a0:	e67c      	b.n	f9c <__aeabi_dsub+0x10c>
    12a2:	2500      	movs	r5, #0
    12a4:	e780      	b.n	11a8 <__aeabi_dsub+0x318>
    12a6:	2100      	movs	r1, #0
    12a8:	e78e      	b.n	11c8 <__aeabi_dsub+0x338>
    12aa:	0023      	movs	r3, r4
    12ac:	4650      	mov	r0, sl
    12ae:	4303      	orrs	r3, r0
    12b0:	2e00      	cmp	r6, #0
    12b2:	d000      	beq.n	12b6 <__aeabi_dsub+0x426>
    12b4:	e0a8      	b.n	1408 <__aeabi_dsub+0x578>
    12b6:	2b00      	cmp	r3, #0
    12b8:	d100      	bne.n	12bc <__aeabi_dsub+0x42c>
    12ba:	e0de      	b.n	147a <__aeabi_dsub+0x5ea>
    12bc:	000b      	movs	r3, r1
    12be:	4313      	orrs	r3, r2
    12c0:	d100      	bne.n	12c4 <__aeabi_dsub+0x434>
    12c2:	e66b      	b.n	f9c <__aeabi_dsub+0x10c>
    12c4:	4452      	add	r2, sl
    12c6:	4552      	cmp	r2, sl
    12c8:	4180      	sbcs	r0, r0
    12ca:	1864      	adds	r4, r4, r1
    12cc:	4240      	negs	r0, r0
    12ce:	1824      	adds	r4, r4, r0
    12d0:	0017      	movs	r7, r2
    12d2:	0223      	lsls	r3, r4, #8
    12d4:	d400      	bmi.n	12d8 <__aeabi_dsub+0x448>
    12d6:	e6fd      	b.n	10d4 <__aeabi_dsub+0x244>
    12d8:	4b77      	ldr	r3, [pc, #476]	; (14b8 <__aeabi_dsub+0x628>)
    12da:	4666      	mov	r6, ip
    12dc:	401c      	ands	r4, r3
    12de:	e65d      	b.n	f9c <__aeabi_dsub+0x10c>
    12e0:	0025      	movs	r5, r4
    12e2:	4650      	mov	r0, sl
    12e4:	4305      	orrs	r5, r0
    12e6:	2e00      	cmp	r6, #0
    12e8:	d1cf      	bne.n	128a <__aeabi_dsub+0x3fa>
    12ea:	2d00      	cmp	r5, #0
    12ec:	d14f      	bne.n	138e <__aeabi_dsub+0x4fe>
    12ee:	000c      	movs	r4, r1
    12f0:	4314      	orrs	r4, r2
    12f2:	d100      	bne.n	12f6 <__aeabi_dsub+0x466>
    12f4:	e0a0      	b.n	1438 <__aeabi_dsub+0x5a8>
    12f6:	000c      	movs	r4, r1
    12f8:	0017      	movs	r7, r2
    12fa:	4698      	mov	r8, r3
    12fc:	e64e      	b.n	f9c <__aeabi_dsub+0x10c>
    12fe:	4666      	mov	r6, ip
    1300:	2400      	movs	r4, #0
    1302:	2700      	movs	r7, #0
    1304:	e685      	b.n	1012 <__aeabi_dsub+0x182>
    1306:	001f      	movs	r7, r3
    1308:	0008      	movs	r0, r1
    130a:	3f20      	subs	r7, #32
    130c:	40f8      	lsrs	r0, r7
    130e:	0007      	movs	r7, r0
    1310:	2b20      	cmp	r3, #32
    1312:	d100      	bne.n	1316 <__aeabi_dsub+0x486>
    1314:	e08e      	b.n	1434 <__aeabi_dsub+0x5a4>
    1316:	2040      	movs	r0, #64	; 0x40
    1318:	1ac3      	subs	r3, r0, r3
    131a:	4099      	lsls	r1, r3
    131c:	430a      	orrs	r2, r1
    131e:	1e51      	subs	r1, r2, #1
    1320:	418a      	sbcs	r2, r1
    1322:	2100      	movs	r1, #0
    1324:	4317      	orrs	r7, r2
    1326:	e692      	b.n	104e <__aeabi_dsub+0x1be>
    1328:	2e00      	cmp	r6, #0
    132a:	d114      	bne.n	1356 <__aeabi_dsub+0x4c6>
    132c:	0026      	movs	r6, r4
    132e:	4650      	mov	r0, sl
    1330:	4306      	orrs	r6, r0
    1332:	d062      	beq.n	13fa <__aeabi_dsub+0x56a>
    1334:	43db      	mvns	r3, r3
    1336:	2b00      	cmp	r3, #0
    1338:	d15c      	bne.n	13f4 <__aeabi_dsub+0x564>
    133a:	1887      	adds	r7, r0, r2
    133c:	4297      	cmp	r7, r2
    133e:	4192      	sbcs	r2, r2
    1340:	1864      	adds	r4, r4, r1
    1342:	4252      	negs	r2, r2
    1344:	18a4      	adds	r4, r4, r2
    1346:	4666      	mov	r6, ip
    1348:	e687      	b.n	105a <__aeabi_dsub+0x1ca>
    134a:	4650      	mov	r0, sl
    134c:	4320      	orrs	r0, r4
    134e:	1e44      	subs	r4, r0, #1
    1350:	41a0      	sbcs	r0, r4
    1352:	2400      	movs	r4, #0
    1354:	e760      	b.n	1218 <__aeabi_dsub+0x388>
    1356:	4e57      	ldr	r6, [pc, #348]	; (14b4 <__aeabi_dsub+0x624>)
    1358:	45b4      	cmp	ip, r6
    135a:	d04e      	beq.n	13fa <__aeabi_dsub+0x56a>
    135c:	2680      	movs	r6, #128	; 0x80
    135e:	0436      	lsls	r6, r6, #16
    1360:	425b      	negs	r3, r3
    1362:	4334      	orrs	r4, r6
    1364:	2b38      	cmp	r3, #56	; 0x38
    1366:	dd00      	ble.n	136a <__aeabi_dsub+0x4da>
    1368:	e07f      	b.n	146a <__aeabi_dsub+0x5da>
    136a:	2b1f      	cmp	r3, #31
    136c:	dd00      	ble.n	1370 <__aeabi_dsub+0x4e0>
    136e:	e08b      	b.n	1488 <__aeabi_dsub+0x5f8>
    1370:	2620      	movs	r6, #32
    1372:	0027      	movs	r7, r4
    1374:	4650      	mov	r0, sl
    1376:	1af6      	subs	r6, r6, r3
    1378:	40b7      	lsls	r7, r6
    137a:	40d8      	lsrs	r0, r3
    137c:	4307      	orrs	r7, r0
    137e:	4650      	mov	r0, sl
    1380:	40b0      	lsls	r0, r6
    1382:	1e46      	subs	r6, r0, #1
    1384:	41b0      	sbcs	r0, r6
    1386:	4307      	orrs	r7, r0
    1388:	40dc      	lsrs	r4, r3
    138a:	18bf      	adds	r7, r7, r2
    138c:	e7d6      	b.n	133c <__aeabi_dsub+0x4ac>
    138e:	000d      	movs	r5, r1
    1390:	4315      	orrs	r5, r2
    1392:	d100      	bne.n	1396 <__aeabi_dsub+0x506>
    1394:	e602      	b.n	f9c <__aeabi_dsub+0x10c>
    1396:	4650      	mov	r0, sl
    1398:	1a80      	subs	r0, r0, r2
    139a:	4582      	cmp	sl, r0
    139c:	41bf      	sbcs	r7, r7
    139e:	1a65      	subs	r5, r4, r1
    13a0:	427f      	negs	r7, r7
    13a2:	1bed      	subs	r5, r5, r7
    13a4:	4684      	mov	ip, r0
    13a6:	0228      	lsls	r0, r5, #8
    13a8:	d400      	bmi.n	13ac <__aeabi_dsub+0x51c>
    13aa:	e68d      	b.n	10c8 <__aeabi_dsub+0x238>
    13ac:	4650      	mov	r0, sl
    13ae:	1a17      	subs	r7, r2, r0
    13b0:	42ba      	cmp	r2, r7
    13b2:	4192      	sbcs	r2, r2
    13b4:	1b0c      	subs	r4, r1, r4
    13b6:	4252      	negs	r2, r2
    13b8:	1aa4      	subs	r4, r4, r2
    13ba:	4698      	mov	r8, r3
    13bc:	e5ee      	b.n	f9c <__aeabi_dsub+0x10c>
    13be:	000d      	movs	r5, r1
    13c0:	4315      	orrs	r5, r2
    13c2:	d100      	bne.n	13c6 <__aeabi_dsub+0x536>
    13c4:	e76b      	b.n	129e <__aeabi_dsub+0x40e>
    13c6:	4650      	mov	r0, sl
    13c8:	0767      	lsls	r7, r4, #29
    13ca:	08c0      	lsrs	r0, r0, #3
    13cc:	4307      	orrs	r7, r0
    13ce:	2080      	movs	r0, #128	; 0x80
    13d0:	08e4      	lsrs	r4, r4, #3
    13d2:	0300      	lsls	r0, r0, #12
    13d4:	4204      	tst	r4, r0
    13d6:	d007      	beq.n	13e8 <__aeabi_dsub+0x558>
    13d8:	08cd      	lsrs	r5, r1, #3
    13da:	4205      	tst	r5, r0
    13dc:	d104      	bne.n	13e8 <__aeabi_dsub+0x558>
    13de:	002c      	movs	r4, r5
    13e0:	4698      	mov	r8, r3
    13e2:	08d7      	lsrs	r7, r2, #3
    13e4:	0749      	lsls	r1, r1, #29
    13e6:	430f      	orrs	r7, r1
    13e8:	0f7b      	lsrs	r3, r7, #29
    13ea:	00e4      	lsls	r4, r4, #3
    13ec:	431c      	orrs	r4, r3
    13ee:	00ff      	lsls	r7, r7, #3
    13f0:	4e30      	ldr	r6, [pc, #192]	; (14b4 <__aeabi_dsub+0x624>)
    13f2:	e5d3      	b.n	f9c <__aeabi_dsub+0x10c>
    13f4:	4e2f      	ldr	r6, [pc, #188]	; (14b4 <__aeabi_dsub+0x624>)
    13f6:	45b4      	cmp	ip, r6
    13f8:	d1b4      	bne.n	1364 <__aeabi_dsub+0x4d4>
    13fa:	000c      	movs	r4, r1
    13fc:	0017      	movs	r7, r2
    13fe:	4666      	mov	r6, ip
    1400:	e5cc      	b.n	f9c <__aeabi_dsub+0x10c>
    1402:	2700      	movs	r7, #0
    1404:	2400      	movs	r4, #0
    1406:	e5e8      	b.n	fda <__aeabi_dsub+0x14a>
    1408:	2b00      	cmp	r3, #0
    140a:	d039      	beq.n	1480 <__aeabi_dsub+0x5f0>
    140c:	000b      	movs	r3, r1
    140e:	4313      	orrs	r3, r2
    1410:	d100      	bne.n	1414 <__aeabi_dsub+0x584>
    1412:	e744      	b.n	129e <__aeabi_dsub+0x40e>
    1414:	08c0      	lsrs	r0, r0, #3
    1416:	0767      	lsls	r7, r4, #29
    1418:	4307      	orrs	r7, r0
    141a:	2080      	movs	r0, #128	; 0x80
    141c:	08e4      	lsrs	r4, r4, #3
    141e:	0300      	lsls	r0, r0, #12
    1420:	4204      	tst	r4, r0
    1422:	d0e1      	beq.n	13e8 <__aeabi_dsub+0x558>
    1424:	08cb      	lsrs	r3, r1, #3
    1426:	4203      	tst	r3, r0
    1428:	d1de      	bne.n	13e8 <__aeabi_dsub+0x558>
    142a:	08d7      	lsrs	r7, r2, #3
    142c:	0749      	lsls	r1, r1, #29
    142e:	430f      	orrs	r7, r1
    1430:	001c      	movs	r4, r3
    1432:	e7d9      	b.n	13e8 <__aeabi_dsub+0x558>
    1434:	2100      	movs	r1, #0
    1436:	e771      	b.n	131c <__aeabi_dsub+0x48c>
    1438:	2500      	movs	r5, #0
    143a:	2700      	movs	r7, #0
    143c:	e5e9      	b.n	1012 <__aeabi_dsub+0x182>
    143e:	002e      	movs	r6, r5
    1440:	0027      	movs	r7, r4
    1442:	3e20      	subs	r6, #32
    1444:	40f7      	lsrs	r7, r6
    1446:	2d20      	cmp	r5, #32
    1448:	d02f      	beq.n	14aa <__aeabi_dsub+0x61a>
    144a:	2640      	movs	r6, #64	; 0x40
    144c:	1b75      	subs	r5, r6, r5
    144e:	40ac      	lsls	r4, r5
    1450:	4650      	mov	r0, sl
    1452:	4320      	orrs	r0, r4
    1454:	1e44      	subs	r4, r0, #1
    1456:	41a0      	sbcs	r0, r4
    1458:	2400      	movs	r4, #0
    145a:	4338      	orrs	r0, r7
    145c:	e6dc      	b.n	1218 <__aeabi_dsub+0x388>
    145e:	2480      	movs	r4, #128	; 0x80
    1460:	2500      	movs	r5, #0
    1462:	0324      	lsls	r4, r4, #12
    1464:	4e13      	ldr	r6, [pc, #76]	; (14b4 <__aeabi_dsub+0x624>)
    1466:	2700      	movs	r7, #0
    1468:	e5d3      	b.n	1012 <__aeabi_dsub+0x182>
    146a:	4650      	mov	r0, sl
    146c:	4320      	orrs	r0, r4
    146e:	0007      	movs	r7, r0
    1470:	1e78      	subs	r0, r7, #1
    1472:	4187      	sbcs	r7, r0
    1474:	2400      	movs	r4, #0
    1476:	18bf      	adds	r7, r7, r2
    1478:	e760      	b.n	133c <__aeabi_dsub+0x4ac>
    147a:	000c      	movs	r4, r1
    147c:	0017      	movs	r7, r2
    147e:	e58d      	b.n	f9c <__aeabi_dsub+0x10c>
    1480:	000c      	movs	r4, r1
    1482:	0017      	movs	r7, r2
    1484:	4e0b      	ldr	r6, [pc, #44]	; (14b4 <__aeabi_dsub+0x624>)
    1486:	e589      	b.n	f9c <__aeabi_dsub+0x10c>
    1488:	001e      	movs	r6, r3
    148a:	0027      	movs	r7, r4
    148c:	3e20      	subs	r6, #32
    148e:	40f7      	lsrs	r7, r6
    1490:	2b20      	cmp	r3, #32
    1492:	d00c      	beq.n	14ae <__aeabi_dsub+0x61e>
    1494:	2640      	movs	r6, #64	; 0x40
    1496:	1af3      	subs	r3, r6, r3
    1498:	409c      	lsls	r4, r3
    149a:	4650      	mov	r0, sl
    149c:	4320      	orrs	r0, r4
    149e:	1e44      	subs	r4, r0, #1
    14a0:	41a0      	sbcs	r0, r4
    14a2:	4307      	orrs	r7, r0
    14a4:	2400      	movs	r4, #0
    14a6:	18bf      	adds	r7, r7, r2
    14a8:	e748      	b.n	133c <__aeabi_dsub+0x4ac>
    14aa:	2400      	movs	r4, #0
    14ac:	e7d0      	b.n	1450 <__aeabi_dsub+0x5c0>
    14ae:	2400      	movs	r4, #0
    14b0:	e7f3      	b.n	149a <__aeabi_dsub+0x60a>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	000007ff 	.word	0x000007ff
    14b8:	ff7fffff 	.word	0xff7fffff

000014bc <__aeabi_d2iz>:
    14bc:	b530      	push	{r4, r5, lr}
    14be:	4d13      	ldr	r5, [pc, #76]	; (150c <__aeabi_d2iz+0x50>)
    14c0:	030a      	lsls	r2, r1, #12
    14c2:	004b      	lsls	r3, r1, #1
    14c4:	0b12      	lsrs	r2, r2, #12
    14c6:	0d5b      	lsrs	r3, r3, #21
    14c8:	0fc9      	lsrs	r1, r1, #31
    14ca:	2400      	movs	r4, #0
    14cc:	42ab      	cmp	r3, r5
    14ce:	dd10      	ble.n	14f2 <__aeabi_d2iz+0x36>
    14d0:	4c0f      	ldr	r4, [pc, #60]	; (1510 <__aeabi_d2iz+0x54>)
    14d2:	42a3      	cmp	r3, r4
    14d4:	dc0f      	bgt.n	14f6 <__aeabi_d2iz+0x3a>
    14d6:	2480      	movs	r4, #128	; 0x80
    14d8:	4d0e      	ldr	r5, [pc, #56]	; (1514 <__aeabi_d2iz+0x58>)
    14da:	0364      	lsls	r4, r4, #13
    14dc:	4322      	orrs	r2, r4
    14de:	1aed      	subs	r5, r5, r3
    14e0:	2d1f      	cmp	r5, #31
    14e2:	dd0b      	ble.n	14fc <__aeabi_d2iz+0x40>
    14e4:	480c      	ldr	r0, [pc, #48]	; (1518 <__aeabi_d2iz+0x5c>)
    14e6:	1ac3      	subs	r3, r0, r3
    14e8:	40da      	lsrs	r2, r3
    14ea:	4254      	negs	r4, r2
    14ec:	2900      	cmp	r1, #0
    14ee:	d100      	bne.n	14f2 <__aeabi_d2iz+0x36>
    14f0:	0014      	movs	r4, r2
    14f2:	0020      	movs	r0, r4
    14f4:	bd30      	pop	{r4, r5, pc}
    14f6:	4b09      	ldr	r3, [pc, #36]	; (151c <__aeabi_d2iz+0x60>)
    14f8:	18cc      	adds	r4, r1, r3
    14fa:	e7fa      	b.n	14f2 <__aeabi_d2iz+0x36>
    14fc:	4c08      	ldr	r4, [pc, #32]	; (1520 <__aeabi_d2iz+0x64>)
    14fe:	40e8      	lsrs	r0, r5
    1500:	46a4      	mov	ip, r4
    1502:	4463      	add	r3, ip
    1504:	409a      	lsls	r2, r3
    1506:	4302      	orrs	r2, r0
    1508:	e7ef      	b.n	14ea <__aeabi_d2iz+0x2e>
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	000003fe 	.word	0x000003fe
    1510:	0000041d 	.word	0x0000041d
    1514:	00000433 	.word	0x00000433
    1518:	00000413 	.word	0x00000413
    151c:	7fffffff 	.word	0x7fffffff
    1520:	fffffbed 	.word	0xfffffbed

00001524 <__aeabi_i2d>:
    1524:	b570      	push	{r4, r5, r6, lr}
    1526:	2800      	cmp	r0, #0
    1528:	d030      	beq.n	158c <__aeabi_i2d+0x68>
    152a:	17c3      	asrs	r3, r0, #31
    152c:	18c4      	adds	r4, r0, r3
    152e:	405c      	eors	r4, r3
    1530:	0fc5      	lsrs	r5, r0, #31
    1532:	0020      	movs	r0, r4
    1534:	f000 f876 	bl	1624 <__clzsi2>
    1538:	4b17      	ldr	r3, [pc, #92]	; (1598 <__aeabi_i2d+0x74>)
    153a:	4a18      	ldr	r2, [pc, #96]	; (159c <__aeabi_i2d+0x78>)
    153c:	1a1b      	subs	r3, r3, r0
    153e:	1ad2      	subs	r2, r2, r3
    1540:	2a1f      	cmp	r2, #31
    1542:	dd18      	ble.n	1576 <__aeabi_i2d+0x52>
    1544:	4a16      	ldr	r2, [pc, #88]	; (15a0 <__aeabi_i2d+0x7c>)
    1546:	1ad2      	subs	r2, r2, r3
    1548:	4094      	lsls	r4, r2
    154a:	2200      	movs	r2, #0
    154c:	0324      	lsls	r4, r4, #12
    154e:	055b      	lsls	r3, r3, #21
    1550:	0b24      	lsrs	r4, r4, #12
    1552:	0d5b      	lsrs	r3, r3, #21
    1554:	2100      	movs	r1, #0
    1556:	0010      	movs	r0, r2
    1558:	0324      	lsls	r4, r4, #12
    155a:	0d0a      	lsrs	r2, r1, #20
    155c:	0b24      	lsrs	r4, r4, #12
    155e:	0512      	lsls	r2, r2, #20
    1560:	4322      	orrs	r2, r4
    1562:	4c10      	ldr	r4, [pc, #64]	; (15a4 <__aeabi_i2d+0x80>)
    1564:	051b      	lsls	r3, r3, #20
    1566:	4022      	ands	r2, r4
    1568:	4313      	orrs	r3, r2
    156a:	005b      	lsls	r3, r3, #1
    156c:	07ed      	lsls	r5, r5, #31
    156e:	085b      	lsrs	r3, r3, #1
    1570:	432b      	orrs	r3, r5
    1572:	0019      	movs	r1, r3
    1574:	bd70      	pop	{r4, r5, r6, pc}
    1576:	0021      	movs	r1, r4
    1578:	4091      	lsls	r1, r2
    157a:	000a      	movs	r2, r1
    157c:	210b      	movs	r1, #11
    157e:	1a08      	subs	r0, r1, r0
    1580:	40c4      	lsrs	r4, r0
    1582:	055b      	lsls	r3, r3, #21
    1584:	0324      	lsls	r4, r4, #12
    1586:	0b24      	lsrs	r4, r4, #12
    1588:	0d5b      	lsrs	r3, r3, #21
    158a:	e7e3      	b.n	1554 <__aeabi_i2d+0x30>
    158c:	2500      	movs	r5, #0
    158e:	2300      	movs	r3, #0
    1590:	2400      	movs	r4, #0
    1592:	2200      	movs	r2, #0
    1594:	e7de      	b.n	1554 <__aeabi_i2d+0x30>
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	0000041e 	.word	0x0000041e
    159c:	00000433 	.word	0x00000433
    15a0:	00000413 	.word	0x00000413
    15a4:	800fffff 	.word	0x800fffff

000015a8 <__aeabi_cdrcmple>:
    15a8:	4684      	mov	ip, r0
    15aa:	1c10      	adds	r0, r2, #0
    15ac:	4662      	mov	r2, ip
    15ae:	468c      	mov	ip, r1
    15b0:	1c19      	adds	r1, r3, #0
    15b2:	4663      	mov	r3, ip
    15b4:	e000      	b.n	15b8 <__aeabi_cdcmpeq>
    15b6:	46c0      	nop			; (mov r8, r8)

000015b8 <__aeabi_cdcmpeq>:
    15b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    15ba:	f000 f8ef 	bl	179c <__ledf2>
    15be:	2800      	cmp	r0, #0
    15c0:	d401      	bmi.n	15c6 <__aeabi_cdcmpeq+0xe>
    15c2:	2100      	movs	r1, #0
    15c4:	42c8      	cmn	r0, r1
    15c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000015c8 <__aeabi_dcmpeq>:
    15c8:	b510      	push	{r4, lr}
    15ca:	f000 f849 	bl	1660 <__eqdf2>
    15ce:	4240      	negs	r0, r0
    15d0:	3001      	adds	r0, #1
    15d2:	bd10      	pop	{r4, pc}

000015d4 <__aeabi_dcmplt>:
    15d4:	b510      	push	{r4, lr}
    15d6:	f000 f8e1 	bl	179c <__ledf2>
    15da:	2800      	cmp	r0, #0
    15dc:	db01      	blt.n	15e2 <__aeabi_dcmplt+0xe>
    15de:	2000      	movs	r0, #0
    15e0:	bd10      	pop	{r4, pc}
    15e2:	2001      	movs	r0, #1
    15e4:	bd10      	pop	{r4, pc}
    15e6:	46c0      	nop			; (mov r8, r8)

000015e8 <__aeabi_dcmple>:
    15e8:	b510      	push	{r4, lr}
    15ea:	f000 f8d7 	bl	179c <__ledf2>
    15ee:	2800      	cmp	r0, #0
    15f0:	dd01      	ble.n	15f6 <__aeabi_dcmple+0xe>
    15f2:	2000      	movs	r0, #0
    15f4:	bd10      	pop	{r4, pc}
    15f6:	2001      	movs	r0, #1
    15f8:	bd10      	pop	{r4, pc}
    15fa:	46c0      	nop			; (mov r8, r8)

000015fc <__aeabi_dcmpgt>:
    15fc:	b510      	push	{r4, lr}
    15fe:	f000 f869 	bl	16d4 <__gedf2>
    1602:	2800      	cmp	r0, #0
    1604:	dc01      	bgt.n	160a <__aeabi_dcmpgt+0xe>
    1606:	2000      	movs	r0, #0
    1608:	bd10      	pop	{r4, pc}
    160a:	2001      	movs	r0, #1
    160c:	bd10      	pop	{r4, pc}
    160e:	46c0      	nop			; (mov r8, r8)

00001610 <__aeabi_dcmpge>:
    1610:	b510      	push	{r4, lr}
    1612:	f000 f85f 	bl	16d4 <__gedf2>
    1616:	2800      	cmp	r0, #0
    1618:	da01      	bge.n	161e <__aeabi_dcmpge+0xe>
    161a:	2000      	movs	r0, #0
    161c:	bd10      	pop	{r4, pc}
    161e:	2001      	movs	r0, #1
    1620:	bd10      	pop	{r4, pc}
    1622:	46c0      	nop			; (mov r8, r8)

00001624 <__clzsi2>:
    1624:	211c      	movs	r1, #28
    1626:	2301      	movs	r3, #1
    1628:	041b      	lsls	r3, r3, #16
    162a:	4298      	cmp	r0, r3
    162c:	d301      	bcc.n	1632 <__clzsi2+0xe>
    162e:	0c00      	lsrs	r0, r0, #16
    1630:	3910      	subs	r1, #16
    1632:	0a1b      	lsrs	r3, r3, #8
    1634:	4298      	cmp	r0, r3
    1636:	d301      	bcc.n	163c <__clzsi2+0x18>
    1638:	0a00      	lsrs	r0, r0, #8
    163a:	3908      	subs	r1, #8
    163c:	091b      	lsrs	r3, r3, #4
    163e:	4298      	cmp	r0, r3
    1640:	d301      	bcc.n	1646 <__clzsi2+0x22>
    1642:	0900      	lsrs	r0, r0, #4
    1644:	3904      	subs	r1, #4
    1646:	a202      	add	r2, pc, #8	; (adr r2, 1650 <__clzsi2+0x2c>)
    1648:	5c10      	ldrb	r0, [r2, r0]
    164a:	1840      	adds	r0, r0, r1
    164c:	4770      	bx	lr
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	02020304 	.word	0x02020304
    1654:	01010101 	.word	0x01010101
	...

00001660 <__eqdf2>:
    1660:	b5f0      	push	{r4, r5, r6, r7, lr}
    1662:	464f      	mov	r7, r9
    1664:	4646      	mov	r6, r8
    1666:	46d6      	mov	lr, sl
    1668:	005c      	lsls	r4, r3, #1
    166a:	b5c0      	push	{r6, r7, lr}
    166c:	031f      	lsls	r7, r3, #12
    166e:	0fdb      	lsrs	r3, r3, #31
    1670:	469a      	mov	sl, r3
    1672:	4b17      	ldr	r3, [pc, #92]	; (16d0 <__eqdf2+0x70>)
    1674:	030e      	lsls	r6, r1, #12
    1676:	004d      	lsls	r5, r1, #1
    1678:	4684      	mov	ip, r0
    167a:	4680      	mov	r8, r0
    167c:	0b36      	lsrs	r6, r6, #12
    167e:	0d6d      	lsrs	r5, r5, #21
    1680:	0fc9      	lsrs	r1, r1, #31
    1682:	4691      	mov	r9, r2
    1684:	0b3f      	lsrs	r7, r7, #12
    1686:	0d64      	lsrs	r4, r4, #21
    1688:	2001      	movs	r0, #1
    168a:	429d      	cmp	r5, r3
    168c:	d008      	beq.n	16a0 <__eqdf2+0x40>
    168e:	429c      	cmp	r4, r3
    1690:	d001      	beq.n	1696 <__eqdf2+0x36>
    1692:	42a5      	cmp	r5, r4
    1694:	d00b      	beq.n	16ae <__eqdf2+0x4e>
    1696:	bc1c      	pop	{r2, r3, r4}
    1698:	4690      	mov	r8, r2
    169a:	4699      	mov	r9, r3
    169c:	46a2      	mov	sl, r4
    169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16a0:	4663      	mov	r3, ip
    16a2:	4333      	orrs	r3, r6
    16a4:	d1f7      	bne.n	1696 <__eqdf2+0x36>
    16a6:	42ac      	cmp	r4, r5
    16a8:	d1f5      	bne.n	1696 <__eqdf2+0x36>
    16aa:	433a      	orrs	r2, r7
    16ac:	d1f3      	bne.n	1696 <__eqdf2+0x36>
    16ae:	2001      	movs	r0, #1
    16b0:	42be      	cmp	r6, r7
    16b2:	d1f0      	bne.n	1696 <__eqdf2+0x36>
    16b4:	45c8      	cmp	r8, r9
    16b6:	d1ee      	bne.n	1696 <__eqdf2+0x36>
    16b8:	4551      	cmp	r1, sl
    16ba:	d007      	beq.n	16cc <__eqdf2+0x6c>
    16bc:	2d00      	cmp	r5, #0
    16be:	d1ea      	bne.n	1696 <__eqdf2+0x36>
    16c0:	4663      	mov	r3, ip
    16c2:	431e      	orrs	r6, r3
    16c4:	0030      	movs	r0, r6
    16c6:	1e46      	subs	r6, r0, #1
    16c8:	41b0      	sbcs	r0, r6
    16ca:	e7e4      	b.n	1696 <__eqdf2+0x36>
    16cc:	2000      	movs	r0, #0
    16ce:	e7e2      	b.n	1696 <__eqdf2+0x36>
    16d0:	000007ff 	.word	0x000007ff

000016d4 <__gedf2>:
    16d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d6:	4645      	mov	r5, r8
    16d8:	46de      	mov	lr, fp
    16da:	4657      	mov	r7, sl
    16dc:	464e      	mov	r6, r9
    16de:	b5e0      	push	{r5, r6, r7, lr}
    16e0:	031f      	lsls	r7, r3, #12
    16e2:	0b3d      	lsrs	r5, r7, #12
    16e4:	4f2c      	ldr	r7, [pc, #176]	; (1798 <__gedf2+0xc4>)
    16e6:	030e      	lsls	r6, r1, #12
    16e8:	004c      	lsls	r4, r1, #1
    16ea:	46ab      	mov	fp, r5
    16ec:	005d      	lsls	r5, r3, #1
    16ee:	4684      	mov	ip, r0
    16f0:	0b36      	lsrs	r6, r6, #12
    16f2:	0d64      	lsrs	r4, r4, #21
    16f4:	0fc9      	lsrs	r1, r1, #31
    16f6:	4690      	mov	r8, r2
    16f8:	0d6d      	lsrs	r5, r5, #21
    16fa:	0fdb      	lsrs	r3, r3, #31
    16fc:	42bc      	cmp	r4, r7
    16fe:	d02a      	beq.n	1756 <__gedf2+0x82>
    1700:	4f25      	ldr	r7, [pc, #148]	; (1798 <__gedf2+0xc4>)
    1702:	42bd      	cmp	r5, r7
    1704:	d02d      	beq.n	1762 <__gedf2+0x8e>
    1706:	2c00      	cmp	r4, #0
    1708:	d10f      	bne.n	172a <__gedf2+0x56>
    170a:	4330      	orrs	r0, r6
    170c:	0007      	movs	r7, r0
    170e:	4681      	mov	r9, r0
    1710:	4278      	negs	r0, r7
    1712:	4178      	adcs	r0, r7
    1714:	b2c0      	uxtb	r0, r0
    1716:	2d00      	cmp	r5, #0
    1718:	d117      	bne.n	174a <__gedf2+0x76>
    171a:	465f      	mov	r7, fp
    171c:	433a      	orrs	r2, r7
    171e:	d114      	bne.n	174a <__gedf2+0x76>
    1720:	464b      	mov	r3, r9
    1722:	2000      	movs	r0, #0
    1724:	2b00      	cmp	r3, #0
    1726:	d00a      	beq.n	173e <__gedf2+0x6a>
    1728:	e006      	b.n	1738 <__gedf2+0x64>
    172a:	2d00      	cmp	r5, #0
    172c:	d102      	bne.n	1734 <__gedf2+0x60>
    172e:	4658      	mov	r0, fp
    1730:	4302      	orrs	r2, r0
    1732:	d001      	beq.n	1738 <__gedf2+0x64>
    1734:	4299      	cmp	r1, r3
    1736:	d018      	beq.n	176a <__gedf2+0x96>
    1738:	4248      	negs	r0, r1
    173a:	2101      	movs	r1, #1
    173c:	4308      	orrs	r0, r1
    173e:	bc3c      	pop	{r2, r3, r4, r5}
    1740:	4690      	mov	r8, r2
    1742:	4699      	mov	r9, r3
    1744:	46a2      	mov	sl, r4
    1746:	46ab      	mov	fp, r5
    1748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    174a:	2800      	cmp	r0, #0
    174c:	d0f2      	beq.n	1734 <__gedf2+0x60>
    174e:	2001      	movs	r0, #1
    1750:	3b01      	subs	r3, #1
    1752:	4318      	orrs	r0, r3
    1754:	e7f3      	b.n	173e <__gedf2+0x6a>
    1756:	0037      	movs	r7, r6
    1758:	4307      	orrs	r7, r0
    175a:	d0d1      	beq.n	1700 <__gedf2+0x2c>
    175c:	2002      	movs	r0, #2
    175e:	4240      	negs	r0, r0
    1760:	e7ed      	b.n	173e <__gedf2+0x6a>
    1762:	465f      	mov	r7, fp
    1764:	4317      	orrs	r7, r2
    1766:	d0ce      	beq.n	1706 <__gedf2+0x32>
    1768:	e7f8      	b.n	175c <__gedf2+0x88>
    176a:	42ac      	cmp	r4, r5
    176c:	dce4      	bgt.n	1738 <__gedf2+0x64>
    176e:	da03      	bge.n	1778 <__gedf2+0xa4>
    1770:	1e48      	subs	r0, r1, #1
    1772:	2101      	movs	r1, #1
    1774:	4308      	orrs	r0, r1
    1776:	e7e2      	b.n	173e <__gedf2+0x6a>
    1778:	455e      	cmp	r6, fp
    177a:	d8dd      	bhi.n	1738 <__gedf2+0x64>
    177c:	d006      	beq.n	178c <__gedf2+0xb8>
    177e:	2000      	movs	r0, #0
    1780:	455e      	cmp	r6, fp
    1782:	d2dc      	bcs.n	173e <__gedf2+0x6a>
    1784:	2301      	movs	r3, #1
    1786:	1e48      	subs	r0, r1, #1
    1788:	4318      	orrs	r0, r3
    178a:	e7d8      	b.n	173e <__gedf2+0x6a>
    178c:	45c4      	cmp	ip, r8
    178e:	d8d3      	bhi.n	1738 <__gedf2+0x64>
    1790:	2000      	movs	r0, #0
    1792:	45c4      	cmp	ip, r8
    1794:	d3f6      	bcc.n	1784 <__gedf2+0xb0>
    1796:	e7d2      	b.n	173e <__gedf2+0x6a>
    1798:	000007ff 	.word	0x000007ff

0000179c <__ledf2>:
    179c:	b5f0      	push	{r4, r5, r6, r7, lr}
    179e:	464e      	mov	r6, r9
    17a0:	4645      	mov	r5, r8
    17a2:	46de      	mov	lr, fp
    17a4:	4657      	mov	r7, sl
    17a6:	005c      	lsls	r4, r3, #1
    17a8:	b5e0      	push	{r5, r6, r7, lr}
    17aa:	031f      	lsls	r7, r3, #12
    17ac:	0fdb      	lsrs	r3, r3, #31
    17ae:	4699      	mov	r9, r3
    17b0:	4b2a      	ldr	r3, [pc, #168]	; (185c <__ledf2+0xc0>)
    17b2:	030e      	lsls	r6, r1, #12
    17b4:	004d      	lsls	r5, r1, #1
    17b6:	0fc9      	lsrs	r1, r1, #31
    17b8:	4684      	mov	ip, r0
    17ba:	0b36      	lsrs	r6, r6, #12
    17bc:	0d6d      	lsrs	r5, r5, #21
    17be:	468b      	mov	fp, r1
    17c0:	4690      	mov	r8, r2
    17c2:	0b3f      	lsrs	r7, r7, #12
    17c4:	0d64      	lsrs	r4, r4, #21
    17c6:	429d      	cmp	r5, r3
    17c8:	d020      	beq.n	180c <__ledf2+0x70>
    17ca:	4b24      	ldr	r3, [pc, #144]	; (185c <__ledf2+0xc0>)
    17cc:	429c      	cmp	r4, r3
    17ce:	d022      	beq.n	1816 <__ledf2+0x7a>
    17d0:	2d00      	cmp	r5, #0
    17d2:	d112      	bne.n	17fa <__ledf2+0x5e>
    17d4:	4330      	orrs	r0, r6
    17d6:	4243      	negs	r3, r0
    17d8:	4143      	adcs	r3, r0
    17da:	b2db      	uxtb	r3, r3
    17dc:	2c00      	cmp	r4, #0
    17de:	d01f      	beq.n	1820 <__ledf2+0x84>
    17e0:	2b00      	cmp	r3, #0
    17e2:	d00c      	beq.n	17fe <__ledf2+0x62>
    17e4:	464b      	mov	r3, r9
    17e6:	2001      	movs	r0, #1
    17e8:	3b01      	subs	r3, #1
    17ea:	4303      	orrs	r3, r0
    17ec:	0018      	movs	r0, r3
    17ee:	bc3c      	pop	{r2, r3, r4, r5}
    17f0:	4690      	mov	r8, r2
    17f2:	4699      	mov	r9, r3
    17f4:	46a2      	mov	sl, r4
    17f6:	46ab      	mov	fp, r5
    17f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17fa:	2c00      	cmp	r4, #0
    17fc:	d016      	beq.n	182c <__ledf2+0x90>
    17fe:	45cb      	cmp	fp, r9
    1800:	d017      	beq.n	1832 <__ledf2+0x96>
    1802:	465b      	mov	r3, fp
    1804:	4259      	negs	r1, r3
    1806:	2301      	movs	r3, #1
    1808:	430b      	orrs	r3, r1
    180a:	e7ef      	b.n	17ec <__ledf2+0x50>
    180c:	0031      	movs	r1, r6
    180e:	2302      	movs	r3, #2
    1810:	4301      	orrs	r1, r0
    1812:	d1eb      	bne.n	17ec <__ledf2+0x50>
    1814:	e7d9      	b.n	17ca <__ledf2+0x2e>
    1816:	0039      	movs	r1, r7
    1818:	2302      	movs	r3, #2
    181a:	4311      	orrs	r1, r2
    181c:	d1e6      	bne.n	17ec <__ledf2+0x50>
    181e:	e7d7      	b.n	17d0 <__ledf2+0x34>
    1820:	433a      	orrs	r2, r7
    1822:	d1dd      	bne.n	17e0 <__ledf2+0x44>
    1824:	2300      	movs	r3, #0
    1826:	2800      	cmp	r0, #0
    1828:	d0e0      	beq.n	17ec <__ledf2+0x50>
    182a:	e7ea      	b.n	1802 <__ledf2+0x66>
    182c:	433a      	orrs	r2, r7
    182e:	d1e6      	bne.n	17fe <__ledf2+0x62>
    1830:	e7e7      	b.n	1802 <__ledf2+0x66>
    1832:	42a5      	cmp	r5, r4
    1834:	dce5      	bgt.n	1802 <__ledf2+0x66>
    1836:	db05      	blt.n	1844 <__ledf2+0xa8>
    1838:	42be      	cmp	r6, r7
    183a:	d8e2      	bhi.n	1802 <__ledf2+0x66>
    183c:	d007      	beq.n	184e <__ledf2+0xb2>
    183e:	2300      	movs	r3, #0
    1840:	42be      	cmp	r6, r7
    1842:	d2d3      	bcs.n	17ec <__ledf2+0x50>
    1844:	4659      	mov	r1, fp
    1846:	2301      	movs	r3, #1
    1848:	3901      	subs	r1, #1
    184a:	430b      	orrs	r3, r1
    184c:	e7ce      	b.n	17ec <__ledf2+0x50>
    184e:	45c4      	cmp	ip, r8
    1850:	d8d7      	bhi.n	1802 <__ledf2+0x66>
    1852:	2300      	movs	r3, #0
    1854:	45c4      	cmp	ip, r8
    1856:	d3f5      	bcc.n	1844 <__ledf2+0xa8>
    1858:	e7c8      	b.n	17ec <__ledf2+0x50>
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	000007ff 	.word	0x000007ff

00001860 <__libc_init_array>:
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	2600      	movs	r6, #0
    1864:	4d0c      	ldr	r5, [pc, #48]	; (1898 <__libc_init_array+0x38>)
    1866:	4c0d      	ldr	r4, [pc, #52]	; (189c <__libc_init_array+0x3c>)
    1868:	1b64      	subs	r4, r4, r5
    186a:	10a4      	asrs	r4, r4, #2
    186c:	42a6      	cmp	r6, r4
    186e:	d109      	bne.n	1884 <__libc_init_array+0x24>
    1870:	2600      	movs	r6, #0
    1872:	f000 f849 	bl	1908 <_init>
    1876:	4d0a      	ldr	r5, [pc, #40]	; (18a0 <__libc_init_array+0x40>)
    1878:	4c0a      	ldr	r4, [pc, #40]	; (18a4 <__libc_init_array+0x44>)
    187a:	1b64      	subs	r4, r4, r5
    187c:	10a4      	asrs	r4, r4, #2
    187e:	42a6      	cmp	r6, r4
    1880:	d105      	bne.n	188e <__libc_init_array+0x2e>
    1882:	bd70      	pop	{r4, r5, r6, pc}
    1884:	00b3      	lsls	r3, r6, #2
    1886:	58eb      	ldr	r3, [r5, r3]
    1888:	4798      	blx	r3
    188a:	3601      	adds	r6, #1
    188c:	e7ee      	b.n	186c <__libc_init_array+0xc>
    188e:	00b3      	lsls	r3, r6, #2
    1890:	58eb      	ldr	r3, [r5, r3]
    1892:	4798      	blx	r3
    1894:	3601      	adds	r6, #1
    1896:	e7f2      	b.n	187e <__libc_init_array+0x1e>
    1898:	00001914 	.word	0x00001914
    189c:	00001914 	.word	0x00001914
    18a0:	00001914 	.word	0x00001914
    18a4:	00001918 	.word	0x00001918
    18a8:	0000066a 	.word	0x0000066a
    18ac:	00000666 	.word	0x00000666
    18b0:	00000666 	.word	0x00000666
    18b4:	000006c8 	.word	0x000006c8
    18b8:	000006c8 	.word	0x000006c8
    18bc:	0000067e 	.word	0x0000067e
    18c0:	00000670 	.word	0x00000670
    18c4:	00000684 	.word	0x00000684
    18c8:	000006b6 	.word	0x000006b6
    18cc:	00000750 	.word	0x00000750
    18d0:	00000730 	.word	0x00000730
    18d4:	00000730 	.word	0x00000730
    18d8:	000007bc 	.word	0x000007bc
    18dc:	00000742 	.word	0x00000742
    18e0:	0000075e 	.word	0x0000075e
    18e4:	00000734 	.word	0x00000734
    18e8:	0000076c 	.word	0x0000076c
    18ec:	000007ac 	.word	0x000007ac
    18f0:	4c4c4548 	.word	0x4c4c4548
    18f4:	0000004f 	.word	0x0000004f
    18f8:	6c726f77 	.word	0x6c726f77
    18fc:	20202064 	.word	0x20202064
    1900:	41327830 	.word	0x41327830
    1904:	00000000 	.word	0x00000000

00001908 <_init>:
    1908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    190e:	bc08      	pop	{r3}
    1910:	469e      	mov	lr, r3
    1912:	4770      	bx	lr

00001914 <__init_array_start>:
    1914:	000000dd 	.word	0x000000dd

00001918 <_fini>:
    1918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    191e:	bc08      	pop	{r3}
    1920:	469e      	mov	lr, r3
    1922:	4770      	bx	lr

00001924 <__fini_array_start>:
    1924:	000000b5 	.word	0x000000b5
